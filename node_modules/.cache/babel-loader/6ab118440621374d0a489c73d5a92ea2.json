{"ast":null,"code":"var _jsxFileName = \"/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/taskBubble/TaskBubble.js\";\nimport { useStyles } from '../App';\nimport '../App.css';\nimport React, { Component } from 'react';\nimport { GetTaskStatusData } from './TaskStatusData';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport Dialog from '@material-ui/core/Dialog';\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport CreateIcon from '@material-ui/icons/Create';\nimport FlagIcon from '@material-ui/icons/Flag';\nimport data from '../MOCK_DATA.json';\nconst styles = makeStyles(theme => ({\n  detailTitle: {\n    fontFamily: 'Poppins',\n    color: '#2b2b2b',\n    fontWeight: '700',\n    fontSize: '1.6em',\n    paddingBottom: '15px',\n    marginBlockStart: 0,\n    marginBlockEnd: 0\n  },\n  detailText: {\n    fontFamily: 'Poppins',\n    color: '#2b2b2b',\n    fontWeight: '500',\n    fontSize: '1.1em',\n    marginBlockStart: 0,\n    marginBlockEnd: 0,\n    paddingLeft: '20px'\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(2),\n    top: theme.spacing(3.5),\n    color: '#1f1f1d'\n  },\n  editButton: {\n    position: 'absolute',\n    right: theme.spacing(8),\n    top: theme.spacing(3.5),\n    color: '#2B2B28'\n  },\n  taskStatus: {\n    fontFamily: 'Poppins',\n    color: '#2b2b2b',\n    fontWeight: '500',\n    fontSize: '1.1em',\n    padding: '0.4em 0.7em',\n    borderRadius: '10px',\n    marginLeft: '20px'\n  }\n}));\n\nfunction DetailDialog(props) {\n  const classes = styles();\n  const {\n    onClose,\n    selectedTask,\n    open\n  } = props;\n\n  const handleClose = () => {\n    onClose(selectedTask);\n  };\n\n  const taskStatusData = GetTaskStatusData(selectedTask.status);\n  return /*#__PURE__*/React.createElement(Dialog, {\n    onClose: handleClose,\n    \"aria-labelledby\": \"simple-dialog-title\",\n    open: open,\n    fullWidth: true,\n    maxWidth: 'xs',\n    PaperProps: {\n      style: {\n        backgroundColor: '#FFEAC8',\n        color: 'black',\n        borderRadius: '30px',\n        padding: '35px',\n        boxShadow: '0px 0px 15px 0px rgba(0,0,0,0.15)'\n      },\n      elevation: 0\n    },\n    BackdropProps: {\n      style: {\n        backgroundColor: \"rgba(0, 0, 0, 0.25)\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: classes.detailTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, selectedTask.title), /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"close\",\n    className: classes.editButton,\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CreateIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"close\",\n    className: classes.closeButton,\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CloseIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'start',\n      padding: '10px 0px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FlagIcon, {\n    style: {\n      paddingTop: '2px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.taskStatus,\n    style: {\n      backgroundColor: taskStatusData.color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, \"taskStatusData.title;\")), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'flex',\n      alignItems: 'flex-start',\n      justifyContent: 'start',\n      padding: '10px 0px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormatAlignLeftIcon, {\n    style: {\n      paddingTop: '2px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    className: classes.detailText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, selectedTask.desc)), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'flex',\n      alignItems: 'flex-start',\n      justifyContent: 'start',\n      padding: '10px 0px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TimerIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    className: classes.detailText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, selectedTask.workTime)));\n}\n\nDetailDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  selectedTask: PropTypes.string.isRequired\n};\nexport function TaskBubble(type) {\n  const classes = useStyles();\n  const filteredData = data.filter(task => task.type.includes(type)); //filter tasks by specified type\n\n  const [open, setOpen] = React.useState(false);\n  const [selectedTask, setSelectedTask] = React.useState({\n    id: '0',\n    title: 'Test',\n    desc: 'Test',\n    workTime: '100h',\n    status: 'not_done'\n  });\n\n  const handleClickOpen = task => {\n    setOpen(true);\n    setSelectedTask(task);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, filteredData.map((item, index) => /*#__PURE__*/React.createElement(React.Fragment, {\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    className: classes.taskBubble,\n    style: {\n      backgroundColor: GetTaskStatusData(item.status).color\n    },\n    onClick: () => handleClickOpen(item),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    flexGrow: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: classes.bubbleTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 29\n    }\n  }, item.title)), /*#__PURE__*/React.createElement(TimerIcon, {\n    style: {\n      marginRight: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    className: classes.bubbleWorkTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 25\n    }\n  }, item.workTime)), /*#__PURE__*/React.createElement(DetailDialog, {\n    open: open,\n    onClose: handleClose,\n    selectedTask: selectedTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }))));\n}\n;","map":{"version":3,"sources":["/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/taskBubble/TaskBubble.js"],"names":["useStyles","React","Component","GetTaskStatusData","makeStyles","PropTypes","Box","Dialog","FormatAlignLeftIcon","TimerIcon","IconButton","CloseIcon","CreateIcon","FlagIcon","data","styles","theme","detailTitle","fontFamily","color","fontWeight","fontSize","paddingBottom","marginBlockStart","marginBlockEnd","detailText","paddingLeft","closeButton","position","right","spacing","top","editButton","taskStatus","padding","borderRadius","marginLeft","DetailDialog","props","classes","onClose","selectedTask","open","handleClose","taskStatusData","status","style","backgroundColor","boxShadow","elevation","title","display","alignItems","justifyContent","paddingTop","desc","workTime","propTypes","func","isRequired","bool","string","TaskBubble","type","filteredData","filter","task","includes","setOpen","useState","setSelectedTask","id","handleClickOpen","map","item","index","taskBubble","bubbleTitle","marginRight","bubbleWorkTime"],"mappings":"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","sourcesContent":["import { useStyles } from '../App';\nimport '../App.css';\nimport React, { Component } from 'react';\nimport { GetTaskStatusData } from './TaskStatusData';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport Dialog from '@material-ui/core/Dialog';\n\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport CreateIcon from '@material-ui/icons/Create';\nimport FlagIcon from '@material-ui/icons/Flag';\n\nimport data from '../MOCK_DATA.json';\n\nconst styles = makeStyles((theme) => ({\n    detailTitle: {\n        fontFamily: 'Poppins',\n        color: '#2b2b2b',\n        fontWeight: '700',\n        fontSize: '1.6em',\n        paddingBottom: '15px',\n        marginBlockStart: 0,\n        marginBlockEnd: 0,\n    },\n    detailText: {\n        fontFamily: 'Poppins',\n        color: '#2b2b2b',\n        fontWeight: '500',\n        fontSize: '1.1em',\n        marginBlockStart: 0,\n        marginBlockEnd: 0,\n        paddingLeft: '20px',\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(2),\n        top: theme.spacing(3.5),\n        color: '#1f1f1d',\n    },\n    editButton: {\n        position: 'absolute',\n        right: theme.spacing(8),\n        top: theme.spacing(3.5),\n        color: '#2B2B28',\n    },\n    taskStatus: {\n        fontFamily: 'Poppins',\n        color: '#2b2b2b',\n        fontWeight: '500',\n        fontSize: '1.1em',\n        padding: '0.4em 0.7em',\n        borderRadius: '10px',\n        marginLeft: '20px',\n    }\n}));\n\nfunction DetailDialog(props) {\n    const classes = styles();\n\n    const { onClose, selectedTask, open } = props;\n\n    const handleClose = () => {\n        onClose(selectedTask);\n    };\n\n    const taskStatusData = GetTaskStatusData(selectedTask.status);\n\n    return (\n        <Dialog\n            onClose={handleClose}\n            aria-labelledby=\"simple-dialog-title\"\n            open={open}\n            fullWidth={true}\n            maxWidth={'xs'}\n            PaperProps={{ style: { backgroundColor: '#FFEAC8', color: 'black', borderRadius: '30px', padding: '35px', boxShadow: '0px 0px 15px 0px rgba(0,0,0,0.15)', }, elevation: 0 }}\n            BackdropProps={{ style: { backgroundColor: \"rgba(0, 0, 0, 0.25)\" } }}\n        >\n            <h1 className={classes.detailTitle}>{selectedTask.title}</h1>\n            <IconButton aria-label=\"close\" className={classes.editButton} onClick={onClose}>\n                <CreateIcon />\n            </IconButton>\n            <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                <CloseIcon />\n            </IconButton>\n\n            <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'start', padding: '10px 0px' }}>\n                <FlagIcon style={{ paddingTop: '2px' }} />\n                <span className={classes.taskStatus} style={{backgroundColor: taskStatusData.color}}>\n                    taskStatusData.title;\n                </span>\n            </span>\n\n            <span style={{ display: 'flex', alignItems: 'flex-start', justifyContent: 'start', padding: '10px 0px' }}>\n                <FormatAlignLeftIcon style={{ paddingTop: '2px' }} />\n                <h3 className={classes.detailText}>\n                    {selectedTask.desc}\n                </h3>\n            </span>\n\n            <span style={{ display: 'flex', alignItems: 'flex-start', justifyContent: 'start', padding: '10px 0px' }}>\n                <TimerIcon />\n                <h3 className={classes.detailText}>\n                    {selectedTask.workTime}\n                </h3>\n            </span>\n\n        </Dialog>\n    );\n}\n\nDetailDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    selectedTask: PropTypes.string.isRequired,\n};\n\nexport function TaskBubble(type) {\n    const classes = useStyles();\n\n    const filteredData = data.filter((task) => task.type.includes(type)); //filter tasks by specified type\n\n    const [open, setOpen] = React.useState(false);\n    const [selectedTask, setSelectedTask] = React.useState({ id: '0', title: 'Test', desc: 'Test', workTime: '100h', status: 'not_done' });\n\n    const handleClickOpen = (task) => {\n        setOpen(true);\n        setSelectedTask(task);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    }\n\n    return (\n        <div>\n            {filteredData.map((item, index) => (\n                <React.Fragment key={item.id} >\n                    <Box className={classes.taskBubble} style={{ backgroundColor: GetTaskStatusData(item.status).color }} onClick={() => handleClickOpen(item)}>\n                        <Box flexGrow={1}>\n                            <h3 className={classes.bubbleTitle}>{item.title}</h3>\n                        </Box>\n\n                        <TimerIcon style={{ marginRight: '5px' }} />\n                        <h3 className={classes.bubbleWorkTime}>{item.workTime}</h3>\n                    </Box>\n\n                    <DetailDialog open={open} onClose={handleClose} selectedTask={selectedTask} />\n                </React.Fragment>\n            ))}\n        </div>\n    )\n};"]},"metadata":{},"sourceType":"module"}