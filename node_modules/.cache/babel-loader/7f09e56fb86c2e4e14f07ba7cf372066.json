{"ast":null,"code":"var _jsxFileName = \"/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/taskBubble/TaskBubble.js\";\nimport { useStyles } from '../App';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport data from '../MOCK_DATA.json';\nimport { SettingsPowerRounded } from '@material-ui/icons';\n\nfunction SimpleDialog(props) {\n  const {\n    onClose,\n    selectedTask,\n    open\n  } = props;\n\n  const handleClose = () => {\n    onClose(selectedTask);\n  };\n\n  const handleListItemClick = value => {\n    onClose(value);\n  };\n\n  return /*#__PURE__*/React.createElement(Dialog, {\n    onClose: handleClose,\n    \"aria-labelledby\": \"simple-dialog-title\",\n    open: open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"simple-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, \"Set backup account\"), /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, selectedTask.map(task => /*#__PURE__*/React.createElement(ListItem, {\n    button: true,\n    onClick: () => handleListItemClick(task),\n    key: task.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ListItemText, {\n    primary: task.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 15\n    }\n  })))));\n}\n\nSimpleDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  selectedTask: PropTypes.string.isRequired\n};\nexport function TaskBubble(type) {\n  const classes = useStyles();\n  const filteredData = data.filter(task => task.type.includes(type)); //filter tasks by specified type\n\n  const [open, setOpen] = React.useState(false);\n  const [selectedTask, setSelectedTask] = React.useState({\n    id: '0',\n    title: 'Test',\n    desc: 'Test',\n    workTime: '100h',\n    state: '#DFFFEC'\n  });\n\n  const handleClickOpen = task => {\n    setOpen(true);\n    setSelectedTask(task);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, filteredData.map((item, index) => /*#__PURE__*/React.createElement(React.Fragment, {\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    className: classes.taskBubble,\n    style: {\n      backgroundColor: item.state\n    },\n    onClick: handleClickOpen(item),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    flexGrow: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: classes.bubbleTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 29\n    }\n  }, item.title)), /*#__PURE__*/React.createElement(TimerIcon, {\n    style: {\n      marginRight: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    className: classes.bubbleWorkTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }\n  }, item.workTime)), /*#__PURE__*/React.createElement(SimpleDialog, {\n    open: open,\n    onClose: handleClose,\n    selectedTask: selectedTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }))));\n}\n;","map":{"version":3,"sources":["/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/taskBubble/TaskBubble.js"],"names":["useStyles","React","Component","PropTypes","Box","TimerIcon","Dialog","DialogTitle","List","ListItem","ListItemText","data","SettingsPowerRounded","SimpleDialog","props","onClose","selectedTask","open","handleClose","handleListItemClick","value","map","task","id","title","propTypes","func","isRequired","bool","string","TaskBubble","type","classes","filteredData","filter","includes","setOpen","useState","setSelectedTask","desc","workTime","state","handleClickOpen","item","index","taskBubble","backgroundColor","bubbleTitle","marginRight","bubbleWorkTime"],"mappings":"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","sourcesContent":["import { useStyles } from '../App';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport data from '../MOCK_DATA.json';\nimport { SettingsPowerRounded } from '@material-ui/icons';\n\nfunction SimpleDialog(props) {\n    const { onClose, selectedTask, open } = props;\n  \n    const handleClose = () => {\n      onClose(selectedTask);\n    };\n  \n    const handleListItemClick = (value) => {\n      onClose(value);\n    };\n  \n    return (\n      <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n        <DialogTitle id=\"simple-dialog-title\">Set backup account</DialogTitle>\n        <List>\n          {selectedTask.map((task) => (\n            <ListItem button onClick={() => handleListItemClick(task)} key={task.id}>\n              <ListItemText primary={task.title} />\n            </ListItem>\n          ))}\n        </List>\n      </Dialog>\n    );\n}\n\nSimpleDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    selectedTask: PropTypes.string.isRequired,\n};\n\nexport function TaskBubble(type) {\n    const classes = useStyles();\n\n    const filteredData = data.filter((task) => task.type.includes(type)); //filter tasks by specified type\n\n    const [open, setOpen] = React.useState(false);\n    const [selectedTask, setSelectedTask] = React.useState({ id: '0', title: 'Test', desc: 'Test', workTime: '100h', state: '#DFFFEC' });\n\n    const handleClickOpen = (task) => {\n        setOpen(true);\n        setSelectedTask(task);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    }\n\n    return (\n        <div>\n            {filteredData.map((item, index) => (\n                <React.Fragment key={item.id} >\n                    <Box className={classes.taskBubble} style={{ backgroundColor: item.state }} onClick={handleClickOpen(item)}>\n                        <Box flexGrow={1}>\n                            <h3 className={classes.bubbleTitle}>{item.title}</h3>\n                        </Box>\n                        \n                        <TimerIcon style={{marginRight:'5px'}}/>\n                        <h3 className={classes.bubbleWorkTime}>{item.workTime}</h3>\n                    </Box>\n\n                    <SimpleDialog open={open} onClose={handleClose} selectedTask={selectedTask} />\n                </React.Fragment>\n            ))}\n        </div>\n    )\n  };"]},"metadata":{},"sourceType":"module"}