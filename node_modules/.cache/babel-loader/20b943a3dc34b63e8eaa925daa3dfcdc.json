{"ast":null,"code":"import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport let CacheControlScope;\n\n(function (CacheControlScope) {\n  CacheControlScope[\"Public\"] = \"PUBLIC\";\n  CacheControlScope[\"Private\"] = \"PRIVATE\";\n})(CacheControlScope || (CacheControlScope = {}));\n\nexport let Status;\n\n(function (Status) {\n  Status[\"Done\"] = \"DONE\";\n  Status[\"NotDone\"] = \"NOT_DONE\";\n  Status[\"InProgress\"] = \"IN_PROGRESS\";\n})(Status || (Status = {}));\n\nexport const NewCommTaskFragmentDoc = gql`\n    fragment NewCommTask on CommunicationTask {\n  id\n  user {\n    id\n  }\n  date\n  description\n  title\n  status\n  pending\n  workTime\n  email\n  phoneNumber\n}\n    `;\nexport const NewMeetingTaskFragmentDoc = gql`\n    fragment NewMeetingTask on MeetingTask {\n  id\n  user {\n    id\n  }\n  date\n  description\n  title\n  status\n  pending\n  endTime\n  startTime\n  address\n  category\n}\n    `;\nexport const NewWorkTaskFragmentDoc = gql`\n    fragment NewWorkTask on WorkTask {\n  id\n  user {\n    id\n  }\n  date\n  description\n  title\n  status\n  pending\n  workTime\n}\n    `;\nexport const NewTeamFragmentDoc = gql`\n    fragment NewTeam on Team {\n  id\n  owner {\n    id\n    name\n    email\n  }\n  members {\n    id\n    name\n    email\n  }\n  name\n  description\n}\n    `;\nexport const MeetingTasksDocument = gql`\n    query meetingTasks($dateFrom: DateTime!, $dateTo: DateTime!, $userId: ID!) {\n  meetingTaskMany(input: {userId: $userId, dateFrom: $dateFrom, dateTo: $dateTo}) {\n    items {\n      id\n      user {\n        id\n      }\n      pending\n      date\n      description\n      index\n      title\n      status\n      endTime\n      startTime\n      address\n      category\n    }\n  }\n}\n    `;\n/**\n * __useMeetingTasksQuery__\n *\n * To run a query within a React component, call `useMeetingTasksQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeetingTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeetingTasksQuery({\n *   variables: {\n *      dateFrom: // value for 'dateFrom'\n *      dateTo: // value for 'dateTo'\n *      userId: // value for 'userId'\n *   },\n * });\n */\n\nexport function useMeetingTasksQuery(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(MeetingTasksDocument, options);\n}\nexport function useMeetingTasksLazyQuery(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(MeetingTasksDocument, options);\n}\nexport const WorkTasksDocument = gql`\n    query workTasks($dateFrom: DateTime!, $dateTo: DateTime!, $userId: ID!) {\n  workTaskMany(input: {userId: $userId, dateFrom: $dateFrom, dateTo: $dateTo}) {\n    items {\n      id\n      pending\n      user {\n        id\n      }\n      date\n      description\n      index\n      title\n      status\n      workTime\n    }\n  }\n}\n    `;\n/**\n * __useWorkTasksQuery__\n *\n * To run a query within a React component, call `useWorkTasksQuery` and pass it any options that fit your needs.\n * When your component renders, `useWorkTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWorkTasksQuery({\n *   variables: {\n *      dateFrom: // value for 'dateFrom'\n *      dateTo: // value for 'dateTo'\n *      userId: // value for 'userId'\n *   },\n * });\n */\n\nexport function useWorkTasksQuery(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(WorkTasksDocument, options);\n}\nexport function useWorkTasksLazyQuery(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(WorkTasksDocument, options);\n}\nexport const CommTasksDocument = gql`\n    query commTasks($dateFrom: DateTime!, $dateTo: DateTime!, $userId: ID!) {\n  communicationTaskMany(\n    input: {userId: $userId, dateFrom: $dateFrom, dateTo: $dateTo}\n  ) {\n    items {\n      id\n      pending\n      user {\n        id\n      }\n      date\n      description\n      index\n      title\n      status\n      workTime\n      email\n      phoneNumber\n    }\n  }\n}\n    `;\n/**\n * __useCommTasksQuery__\n *\n * To run a query within a React component, call `useCommTasksQuery` and pass it any options that fit your needs.\n * When your component renders, `useCommTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCommTasksQuery({\n *   variables: {\n *      dateFrom: // value for 'dateFrom'\n *      dateTo: // value for 'dateTo'\n *      userId: // value for 'userId'\n *   },\n * });\n */\n\nexport function useCommTasksQuery(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(CommTasksDocument, options);\n}\nexport function useCommTasksLazyQuery(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(CommTasksDocument, options);\n}\nexport const EditMeetingTaskDateDocument = gql`\n    mutation EditMeetingTaskDate($id: ID!, $userId: ID!, $date: DateTime!, $index: Float!) {\n  editTask(input: {id: $id, userId: $userId, date: $date, index: $index}) {\n    ... on MeetingTask {\n      id\n      user {\n        id\n      }\n      pending\n      date\n      description\n      index\n      title\n      status\n      endTime\n      startTime\n      address\n      category\n    }\n  }\n}\n    `;\n\n/**\n * __useEditMeetingTaskDateMutation__\n *\n * To run a mutation, you first call `useEditMeetingTaskDateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditMeetingTaskDateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editMeetingTaskDateMutation, { data, loading, error }] = useEditMeetingTaskDateMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      index: // value for 'index'\n *   },\n * });\n */\nexport function useEditMeetingTaskDateMutation(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(EditMeetingTaskDateDocument, options);\n}\nexport const EditCommTaskDateDocument = gql`\n    mutation EditCommTaskDate($id: ID!, $userId: ID!, $date: DateTime!, $index: Float!) {\n  editTask(input: {id: $id, userId: $userId, date: $date, index: $index}) {\n    ... on CommunicationTask {\n      id\n      pending\n      user {\n        id\n      }\n      date\n      description\n      index\n      title\n      status\n      workTime\n      email\n      phoneNumber\n    }\n  }\n}\n    `;\n\n/**\n * __useEditCommTaskDateMutation__\n *\n * To run a mutation, you first call `useEditCommTaskDateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditCommTaskDateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editCommTaskDateMutation, { data, loading, error }] = useEditCommTaskDateMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      index: // value for 'index'\n *   },\n * });\n */\nexport function useEditCommTaskDateMutation(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(EditCommTaskDateDocument, options);\n}\nexport const EditWorkTaskDateDocument = gql`\n    mutation EditWorkTaskDate($id: ID!, $userId: ID!, $date: DateTime!, $index: Float!) {\n  editTask(input: {id: $id, userId: $userId, date: $date, index: $index}) {\n    ... on WorkTask {\n      id\n      pending\n      user {\n        id\n      }\n      date\n      description\n      index\n      title\n      status\n      workTime\n    }\n  }\n}\n    `;\n\n/**\n * __useEditWorkTaskDateMutation__\n *\n * To run a mutation, you first call `useEditWorkTaskDateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditWorkTaskDateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editWorkTaskDateMutation, { data, loading, error }] = useEditWorkTaskDateMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      index: // value for 'index'\n *   },\n * });\n */\nexport function useEditWorkTaskDateMutation(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(EditWorkTaskDateDocument, options);\n}\nexport const EditWorkTaskStatusDocument = gql`\n    mutation EditWorkTaskStatus($id: ID!, $userId: ID!, $date: DateTime!, $status: Status!) {\n  editTask(input: {id: $id, userId: $userId, date: $date, status: $status}) {\n    ... on WorkTask {\n      id\n      pending\n      user {\n        id\n      }\n      date\n      description\n      title\n      status\n      workTime\n    }\n  }\n}\n    `;\n\n/**\n * __useEditWorkTaskStatusMutation__\n *\n * To run a mutation, you first call `useEditWorkTaskStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditWorkTaskStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editWorkTaskStatusMutation, { data, loading, error }] = useEditWorkTaskStatusMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      status: // value for 'status'\n *   },\n * });\n */\nexport function useEditWorkTaskStatusMutation(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(EditWorkTaskStatusDocument, options);\n}\nexport const EditWorkTaskDocument = gql`\n    mutation EditWorkTask($id: ID!, $userId: ID!, $date: DateTime!, $title: String!, $status: Status!, $description: String!, $workTime: String!, $pending: Boolean!) {\n  editTask(\n    input: {id: $id, userId: $userId, date: $date, title: $title, status: $status, description: $description, pending: $pending, workTask: {workTime: $workTime}}\n  ) {\n    ... on WorkTask {\n      id\n      date\n      description\n      title\n      status\n      workTime\n    }\n  }\n}\n    `;\n\n/**\n * __useEditWorkTaskMutation__\n *\n * To run a mutation, you first call `useEditWorkTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditWorkTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editWorkTaskMutation, { data, loading, error }] = useEditWorkTaskMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      title: // value for 'title'\n *      status: // value for 'status'\n *      description: // value for 'description'\n *      workTime: // value for 'workTime'\n *      pending: // value for 'pending'\n *   },\n * });\n */\nexport function useEditWorkTaskMutation(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(EditWorkTaskDocument, options);\n}\nexport const EditMeetingTaskDocument = gql`\n    mutation EditMeetingTask($id: ID!, $userId: ID!, $date: DateTime!, $title: String!, $status: Status!, $description: String!, $endTime: String!, $startTime: String!, $address: String!, $category: String!, $pending: Boolean!) {\n  editTask(\n    input: {id: $id, userId: $userId, date: $date, title: $title, status: $status, description: $description, pending: $pending, meetingTask: {endTime: $endTime, startTime: $startTime, address: $address, category: $category}}\n  ) {\n    ... on MeetingTask {\n      id\n      date\n      description\n      title\n      status\n      endTime\n      startTime\n      address\n      category\n    }\n  }\n}\n    `;\n\n/**\n * __useEditMeetingTaskMutation__\n *\n * To run a mutation, you first call `useEditMeetingTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditMeetingTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editMeetingTaskMutation, { data, loading, error }] = useEditMeetingTaskMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      title: // value for 'title'\n *      status: // value for 'status'\n *      description: // value for 'description'\n *      endTime: // value for 'endTime'\n *      startTime: // value for 'startTime'\n *      address: // value for 'address'\n *      category: // value for 'category'\n *      pending: // value for 'pending'\n *   },\n * });\n */\nexport function useEditMeetingTaskMutation(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(EditMeetingTaskDocument, options);\n}\nexport const DeleteMeetingTaskDocument = gql`\n    mutation DeleteMeetingTask($id: ID!) {\n  deleteTask(id: $id)\n}\n    `;\n\n/**\n * __useDeleteMeetingTaskMutation__\n *\n * To run a mutation, you first call `useDeleteMeetingTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteMeetingTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteMeetingTaskMutation, { data, loading, error }] = useDeleteMeetingTaskMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteMeetingTaskMutation(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(DeleteMeetingTaskDocument, options);\n}\nexport const DeleteWorkTaskDocument = gql`\n    mutation DeleteWorkTask($id: ID!) {\n  deleteTask(id: $id)\n}\n    `;\n\n/**\n * __useDeleteWorkTaskMutation__\n *\n * To run a mutation, you first call `useDeleteWorkTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteWorkTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteWorkTaskMutation, { data, loading, error }] = useDeleteWorkTaskMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteWorkTaskMutation(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(DeleteWorkTaskDocument, options);\n}\nexport const EditCommTaskDocument = gql`\n    mutation EditCommTask($id: ID!, $userId: ID!, $date: DateTime!, $title: String!, $status: Status!, $description: String!, $workTime: String!, $phoneNumber: String!, $email: String!, $pending: Boolean!) {\n  editTask(\n    input: {id: $id, userId: $userId, date: $date, title: $title, status: $status, description: $description, pending: $pending, communicationTask: {workTime: $workTime, phoneNumber: $phoneNumber, email: $email}}\n  ) {\n    ... on CommunicationTask {\n      id\n      date\n      description\n      title\n      status\n      workTime\n      phoneNumber\n      email\n    }\n  }\n}\n    `;\n\n/**\n * __useEditCommTaskMutation__\n *\n * To run a mutation, you first call `useEditCommTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditCommTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editCommTaskMutation, { data, loading, error }] = useEditCommTaskMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      title: // value for 'title'\n *      status: // value for 'status'\n *      description: // value for 'description'\n *      workTime: // value for 'workTime'\n *      phoneNumber: // value for 'phoneNumber'\n *      email: // value for 'email'\n *      pending: // value for 'pending'\n *   },\n * });\n */\nexport function useEditCommTaskMutation(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(EditCommTaskDocument, options);\n}\nexport const DeleteCommTaskDocument = gql`\n    mutation DeleteCommTask($id: ID!) {\n  deleteTask(id: $id)\n}\n    `;\n\n/**\n * __useDeleteCommTaskMutation__\n *\n * To run a mutation, you first call `useDeleteCommTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCommTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCommTaskMutation, { data, loading, error }] = useDeleteCommTaskMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteCommTaskMutation(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(DeleteCommTaskDocument, options);\n}\nexport const EditMeetingTaskStatusDocument = gql`\n    mutation EditMeetingTaskStatus($id: ID!, $userId: ID!, $date: DateTime!, $status: Status!) {\n  editTask(input: {id: $id, userId: $userId, date: $date, status: $status}) {\n    ... on MeetingTask {\n      id\n      date\n      status\n    }\n  }\n}\n    `;\n\n/**\n * __useEditMeetingTaskStatusMutation__\n *\n * To run a mutation, you first call `useEditMeetingTaskStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditMeetingTaskStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editMeetingTaskStatusMutation, { data, loading, error }] = useEditMeetingTaskStatusMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      status: // value for 'status'\n *   },\n * });\n */\nexport function useEditMeetingTaskStatusMutation(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(EditMeetingTaskStatusDocument, options);\n}\nexport const EditCommTaskStatusDocument = gql`\n    mutation EditCommTaskStatus($id: ID!, $userId: ID!, $date: DateTime!, $status: Status!) {\n  editTask(input: {id: $id, userId: $userId, date: $date, status: $status}) {\n    ... on CommunicationTask {\n      id\n      date\n      status\n    }\n  }\n}\n    `;\n\n/**\n * __useEditCommTaskStatusMutation__\n *\n * To run a mutation, you first call `useEditCommTaskStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditCommTaskStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editCommTaskStatusMutation, { data, loading, error }] = useEditCommTaskStatusMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      status: // value for 'status'\n *   },\n * });\n */\nexport function useEditCommTaskStatusMutation(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(EditCommTaskStatusDocument, options);\n}\nexport const TeamManyDocument = gql`\n    query TeamMany($userId: ID!) {\n  teamMany(ownerId: $userId) {\n    total\n    items {\n      id\n      owner {\n        id\n        name\n        email\n      }\n      members {\n        id\n        name\n        email\n      }\n      name\n      description\n    }\n  }\n}\n    `;\n/**\n * __useTeamManyQuery__\n *\n * To run a query within a React component, call `useTeamManyQuery` and pass it any options that fit your needs.\n * When your component renders, `useTeamManyQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTeamManyQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */\n\nexport function useTeamManyQuery(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(TeamManyDocument, options);\n}\nexport function useTeamManyLazyQuery(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(TeamManyDocument, options);\n}\nexport const AddCommunicationTaskDocument = gql`\n    mutation AddCommunicationTask($id: ID!, $userId: ID!, $date: String!, $title: String!, $status: Status!, $description: String!, $index: Float!, $workTime: String!, $email: String!, $phoneNumber: String!) {\n  createTask(\n    input: {id: $id, userId: $userId, date: $date, title: $title, status: $status, description: $description, index: $index, communicationTask: {workTime: $workTime, email: $email, phoneNumber: $phoneNumber}}\n  ) {\n    ... on CommunicationTask {\n      id\n      pending\n      user {\n        id\n      }\n      date\n      description\n      index\n      title\n      status\n      workTime\n      email\n      phoneNumber\n    }\n  }\n}\n    `;\n\n/**\n * __useAddCommunicationTaskMutation__\n *\n * To run a mutation, you first call `useAddCommunicationTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCommunicationTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCommunicationTaskMutation, { data, loading, error }] = useAddCommunicationTaskMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      title: // value for 'title'\n *      status: // value for 'status'\n *      description: // value for 'description'\n *      index: // value for 'index'\n *      workTime: // value for 'workTime'\n *      email: // value for 'email'\n *      phoneNumber: // value for 'phoneNumber'\n *   },\n * });\n */\nexport function useAddCommunicationTaskMutation(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(AddCommunicationTaskDocument, options);\n}\nexport const AddMeetingTaskDocument = gql`\n    mutation AddMeetingTask($id: ID!, $userId: ID!, $date: String!, $title: String!, $status: Status!, $description: String!, $index: Float!, $endTime: String!, $startTime: String!, $address: String!, $category: String!) {\n  createTask(\n    input: {id: $id, userId: $userId, date: $date, title: $title, status: $status, description: $description, index: $index, meetingTask: {endTime: $endTime, startTime: $startTime, address: $address, category: $category}}\n  ) {\n    ... on MeetingTask {\n      id\n      user {\n        id\n      }\n      pending\n      date\n      description\n      index\n      title\n      status\n      endTime\n      startTime\n      address\n      category\n    }\n  }\n}\n    `;\n\n/**\n * __useAddMeetingTaskMutation__\n *\n * To run a mutation, you first call `useAddMeetingTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddMeetingTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addMeetingTaskMutation, { data, loading, error }] = useAddMeetingTaskMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      title: // value for 'title'\n *      status: // value for 'status'\n *      description: // value for 'description'\n *      index: // value for 'index'\n *      endTime: // value for 'endTime'\n *      startTime: // value for 'startTime'\n *      address: // value for 'address'\n *      category: // value for 'category'\n *   },\n * });\n */\nexport function useAddMeetingTaskMutation(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(AddMeetingTaskDocument, options);\n}\nexport const AddWorkTaskDocument = gql`\n    mutation AddWorkTask($id: ID!, $userId: ID!, $date: String!, $title: String!, $index: Float!, $status: Status!, $description: String!, $workTime: String!) {\n  createTask(\n    input: {id: $id, userId: $userId, date: $date, title: $title, status: $status, description: $description, index: $index, workTask: {workTime: $workTime}}\n  ) {\n    ... on WorkTask {\n      id\n      pending\n      user {\n        id\n      }\n      date\n      description\n      index\n      title\n      status\n      workTime\n    }\n  }\n}\n    `;\n\n/**\n * __useAddWorkTaskMutation__\n *\n * To run a mutation, you first call `useAddWorkTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddWorkTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addWorkTaskMutation, { data, loading, error }] = useAddWorkTaskMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      title: // value for 'title'\n *      index: // value for 'index'\n *      status: // value for 'status'\n *      description: // value for 'description'\n *      workTime: // value for 'workTime'\n *   },\n * });\n */\nexport function useAddWorkTaskMutation(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(AddWorkTaskDocument, options);\n}\nexport const CreateTeamDocument = gql`\n    mutation CreateTeam($id: ID!, $ownerId: ID!, $members: [ID!]!, $name: String!, $description: String!) {\n  createTeam(\n    input: {id: $id, ownerId: $ownerId, members: $members, name: $name, description: $description}\n  ) {\n    id\n    owner {\n      id\n      name\n      email\n    }\n    members {\n      id\n      name\n      email\n    }\n    name\n    description\n  }\n}\n    `;\n\n/**\n * __useCreateTeamMutation__\n *\n * To run a mutation, you first call `useCreateTeamMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTeamMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTeamMutation, { data, loading, error }] = useCreateTeamMutation({\n *   variables: {\n *      id: // value for 'id'\n *      ownerId: // value for 'ownerId'\n *      members: // value for 'members'\n *      name: // value for 'name'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useCreateTeamMutation(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(CreateTeamDocument, options);\n}\nexport const UserDocument = gql`\n    query User($id: ID!) {\n  user(id: $id) {\n    id\n    name\n    email\n  }\n}\n    `;\n/**\n * __useUserQuery__\n *\n * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useUserQuery(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(UserDocument, options);\n}\nexport function useUserLazyQuery(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(UserDocument, options);\n}\nexport const UserByEmailDocument = gql`\n    query UserByEmail($email: String!) {\n  userByEmail(email: $email) {\n    id\n    name\n    email\n  }\n}\n    `;\n/**\n * __useUserByEmailQuery__\n *\n * To run a query within a React component, call `useUserByEmailQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserByEmailQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserByEmailQuery({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\n\nexport function useUserByEmailQuery(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(UserByEmailDocument, options);\n}\nexport function useUserByEmailLazyQuery(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(UserByEmailDocument, options);\n}\nexport const TeamMeetingTaskManyDocument = gql`\n    query TeamMeetingTaskMany($teamId: ID!, $dateFrom: DateTime!, $dateTo: DateTime!) {\n  teamMeetingTaskMany(\n    input: {filter: {teamId: $teamId, dateFrom: $dateFrom, dateTo: $dateTo}}\n  ) {\n    total\n    items {\n      date\n      title\n      description\n      endTime\n      startTime\n      address\n      category\n    }\n  }\n}\n    `;\n/**\n * __useTeamMeetingTaskManyQuery__\n *\n * To run a query within a React component, call `useTeamMeetingTaskManyQuery` and pass it any options that fit your needs.\n * When your component renders, `useTeamMeetingTaskManyQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTeamMeetingTaskManyQuery({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      dateFrom: // value for 'dateFrom'\n *      dateTo: // value for 'dateTo'\n *   },\n * });\n */\n\nexport function useTeamMeetingTaskManyQuery(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(TeamMeetingTaskManyDocument, options);\n}\nexport function useTeamMeetingTaskManyLazyQuery(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(TeamMeetingTaskManyDocument, options);\n}\nexport const NotificationDocument = gql`\n    subscription Notification($userId: ID!) {\n  notification(userId: $userId) {\n    id\n    fromUser {\n      name\n    }\n    type\n    date\n    acknowledged\n    team {\n      id\n      name\n    }\n  }\n}\n    `;\n/**\n * __useNotificationSubscription__\n *\n * To run a query within a React component, call `useNotificationSubscription` and pass it any options that fit your needs.\n * When your component renders, `useNotificationSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNotificationSubscription({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */\n\nexport function useNotificationSubscription(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useSubscription(NotificationDocument, options);\n}\nexport const GetNotificationManyDocument = gql`\n    query GetNotificationMany($userId: ID!, $limit: Int!) {\n  userNotificationMany(input: {userId: $userId, limit: $limit}) {\n    total\n    items {\n      id\n      fromUser {\n        name\n      }\n      type\n      date\n      acknowledged\n      team {\n        name\n      }\n    }\n  }\n}\n    `;\n/**\n * __useGetNotificationManyQuery__\n *\n * To run a query within a React component, call `useGetNotificationManyQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetNotificationManyQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetNotificationManyQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *      limit: // value for 'limit'\n *   },\n * });\n */\n\nexport function useGetNotificationManyQuery(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(GetNotificationManyDocument, options);\n}\nexport function useGetNotificationManyLazyQuery(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(GetNotificationManyDocument, options);\n}\nexport const UsersTeamMeetingManyDocument = gql`\n    query UsersTeamMeetingMany($userIds: [String!]!, $dateFrom: DateTime!, $dateTo: DateTime!) {\n  usersMeetingTaskMany(\n    input: {userIds: $userIds, dateFrom: $dateFrom, dateTo: $dateTo}\n  ) {\n    total\n    items {\n      user {\n        name\n      }\n      meetingTasks {\n        total\n        items {\n          id\n          date\n          title\n          startTime\n          endTime\n        }\n      }\n    }\n  }\n}\n    `;\n/**\n * __useUsersTeamMeetingManyQuery__\n *\n * To run a query within a React component, call `useUsersTeamMeetingManyQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersTeamMeetingManyQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersTeamMeetingManyQuery({\n *   variables: {\n *      userIds: // value for 'userIds'\n *      dateFrom: // value for 'dateFrom'\n *      dateTo: // value for 'dateTo'\n *   },\n * });\n */\n\nexport function useUsersTeamMeetingManyQuery(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(UsersTeamMeetingManyDocument, options);\n}\nexport function useUsersTeamMeetingManyLazyQuery(baseOptions) {\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(UsersTeamMeetingManyDocument, options);\n}","map":{"version":3,"sources":["/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/generated/graphql.tsx"],"names":["gql","Apollo","defaultOptions","CacheControlScope","Status","NewCommTaskFragmentDoc","NewMeetingTaskFragmentDoc","NewWorkTaskFragmentDoc","NewTeamFragmentDoc","MeetingTasksDocument","useMeetingTasksQuery","baseOptions","options","useQuery","useMeetingTasksLazyQuery","useLazyQuery","WorkTasksDocument","useWorkTasksQuery","useWorkTasksLazyQuery","CommTasksDocument","useCommTasksQuery","useCommTasksLazyQuery","EditMeetingTaskDateDocument","useEditMeetingTaskDateMutation","useMutation","EditCommTaskDateDocument","useEditCommTaskDateMutation","EditWorkTaskDateDocument","useEditWorkTaskDateMutation","EditWorkTaskStatusDocument","useEditWorkTaskStatusMutation","EditWorkTaskDocument","useEditWorkTaskMutation","EditMeetingTaskDocument","useEditMeetingTaskMutation","DeleteMeetingTaskDocument","useDeleteMeetingTaskMutation","DeleteWorkTaskDocument","useDeleteWorkTaskMutation","EditCommTaskDocument","useEditCommTaskMutation","DeleteCommTaskDocument","useDeleteCommTaskMutation","EditMeetingTaskStatusDocument","useEditMeetingTaskStatusMutation","EditCommTaskStatusDocument","useEditCommTaskStatusMutation","TeamManyDocument","useTeamManyQuery","useTeamManyLazyQuery","AddCommunicationTaskDocument","useAddCommunicationTaskMutation","AddMeetingTaskDocument","useAddMeetingTaskMutation","AddWorkTaskDocument","useAddWorkTaskMutation","CreateTeamDocument","useCreateTeamMutation","UserDocument","useUserQuery","useUserLazyQuery","UserByEmailDocument","useUserByEmailQuery","useUserByEmailLazyQuery","TeamMeetingTaskManyDocument","useTeamMeetingTaskManyQuery","useTeamMeetingTaskManyLazyQuery","NotificationDocument","useNotificationSubscription","useSubscription","GetNotificationManyDocument","useGetNotificationManyQuery","useGetNotificationManyLazyQuery","UsersTeamMeetingManyDocument","useUsersTeamMeetingManyQuery","useUsersTeamMeetingManyLazyQuery"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AAKA,MAAMC,cAAc,GAAI,EAAxB;AACA;;AAgBA,WAAYC,iBAAZ;;WAAYA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;GAAAA,iB,KAAAA,iB;;AAiTZ,WAAYC,MAAZ;;WAAYA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;GAAAA,M,KAAAA,M;;AA4qBZ,OAAO,MAAMC,sBAAsB,GAAGL,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAfO;AAgBP,OAAO,MAAMM,yBAAyB,GAAGN,GAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAhBO;AAiBP,OAAO,MAAMO,sBAAsB,GAAGP,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAbO;AAcP,OAAO,MAAMQ,kBAAkB,GAAGR,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAhBO;AAiBP,OAAO,MAAMS,oBAAoB,GAAGT,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KArBO;AAuBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASU,oBAAT,CAA8BC,WAA9B,EAAmH;AAClH,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACY,QAAP,CAA+DJ,oBAA/D,EAAqFG,OAArF,CAAP;AACD;AACP,OAAO,SAASE,wBAAT,CAAkCH,WAAlC,EAA4H;AACzH,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACc,YAAP,CAAmEN,oBAAnE,EAAyFG,OAAzF,CAAP;AACD;AAIT,OAAO,MAAMI,iBAAiB,GAAGhB,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAlBO;AAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASiB,iBAAT,CAA2BN,WAA3B,EAA0G;AACzG,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACY,QAAP,CAAyDG,iBAAzD,EAA4EJ,OAA5E,CAAP;AACD;AACP,OAAO,SAASM,qBAAT,CAA+BP,WAA/B,EAAmH;AAChH,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACc,YAAP,CAA6DC,iBAA7D,EAAgFJ,OAAhF,CAAP;AACD;AAIT,OAAO,MAAMO,iBAAiB,GAAGnB,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAtBO;AAwBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASoB,iBAAT,CAA2BT,WAA3B,EAA0G;AACzG,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACY,QAAP,CAAyDM,iBAAzD,EAA4EP,OAA5E,CAAP;AACD;AACP,OAAO,SAASS,qBAAT,CAA+BV,WAA/B,EAAmH;AAChH,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACc,YAAP,CAA6DI,iBAA7D,EAAgFP,OAAhF,CAAP;AACD;AAIT,OAAO,MAAMU,2BAA2B,GAAGtB,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KArBO;;AAwBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASuB,8BAAT,CAAwCZ,WAAxC,EAAqJ;AACpJ,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACuB,WAAP,CAAsFF,2BAAtF,EAAmHV,OAAnH,CAAP;AACD;AAIP,OAAO,MAAMa,wBAAwB,GAAGzB,GAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KApBO;;AAuBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS0B,2BAAT,CAAqCf,WAArC,EAA4I;AAC3I,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACuB,WAAP,CAAgFC,wBAAhF,EAA0Gb,OAA1G,CAAP;AACD;AAIP,OAAO,MAAMe,wBAAwB,GAAG3B,GAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAlBO;;AAqBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS4B,2BAAT,CAAqCjB,WAArC,EAA4I;AAC3I,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACuB,WAAP,CAAgFG,wBAAhF,EAA0Gf,OAA1G,CAAP;AACD;AAIP,OAAO,MAAMiB,0BAA0B,GAAG7B,GAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAjBO;;AAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS8B,6BAAT,CAAuCnB,WAAvC,EAAkJ;AACjJ,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACuB,WAAP,CAAoFK,0BAApF,EAAgHjB,OAAhH,CAAP;AACD;AAIP,OAAO,MAAMmB,oBAAoB,GAAG/B,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAfO;;AAkBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASgC,uBAAT,CAAiCrB,WAAjC,EAAgI;AAC/H,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACuB,WAAP,CAAwEO,oBAAxE,EAA8FnB,OAA9F,CAAP;AACD;AAIP,OAAO,MAAMqB,uBAAuB,GAAGjC,GAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAlBO;;AAqBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASkC,0BAAT,CAAoCvB,WAApC,EAAyI;AACxI,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACuB,WAAP,CAA8ES,uBAA9E,EAAuGrB,OAAvG,CAAP;AACD;AAIP,OAAO,MAAMuB,yBAAyB,GAAGnC,GAAI;AAC7C;AACA;AACA;AACA,KAJO;;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASoC,4BAAT,CAAsCzB,WAAtC,EAA+I;AAC9I,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACuB,WAAP,CAAkFW,yBAAlF,EAA6GvB,OAA7G,CAAP;AACD;AAIP,OAAO,MAAMyB,sBAAsB,GAAGrC,GAAI;AAC1C;AACA;AACA;AACA,KAJO;;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASsC,yBAAT,CAAmC3B,WAAnC,EAAsI;AACrI,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACuB,WAAP,CAA4Ea,sBAA5E,EAAoGzB,OAApG,CAAP;AACD;AAIP,OAAO,MAAM2B,oBAAoB,GAAGvC,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAjBO;;AAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASwC,uBAAT,CAAiC7B,WAAjC,EAAgI;AAC/H,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACuB,WAAP,CAAwEe,oBAAxE,EAA8F3B,OAA9F,CAAP;AACD;AAIP,OAAO,MAAM6B,sBAAsB,GAAGzC,GAAI;AAC1C;AACA;AACA;AACA,KAJO;;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS0C,yBAAT,CAAmC/B,WAAnC,EAAsI;AACrI,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACuB,WAAP,CAA4EiB,sBAA5E,EAAoG7B,OAApG,CAAP;AACD;AAIP,OAAO,MAAM+B,6BAA6B,GAAG3C,GAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAVO;;AAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS4C,gCAAT,CAA0CjC,WAA1C,EAA2J;AAC1J,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACuB,WAAP,CAA0FmB,6BAA1F,EAAyH/B,OAAzH,CAAP;AACD;AAIP,OAAO,MAAMiC,0BAA0B,GAAG7C,GAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAVO;;AAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS8C,6BAAT,CAAuCnC,WAAvC,EAAkJ;AACjJ,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACuB,WAAP,CAAoFqB,0BAApF,EAAgHjC,OAAhH,CAAP;AACD;AAIP,OAAO,MAAMmC,gBAAgB,GAAG/C,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KArBO;AAuBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASgD,gBAAT,CAA0BrC,WAA1B,EAAuG;AACtG,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACY,QAAP,CAAuDkC,gBAAvD,EAAyEnC,OAAzE,CAAP;AACD;AACP,OAAO,SAASqC,oBAAT,CAA8BtC,WAA9B,EAAgH;AAC7G,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACc,YAAP,CAA2DgC,gBAA3D,EAA6EnC,OAA7E,CAAP;AACD;AAIT,OAAO,MAAMsC,4BAA4B,GAAGlD,GAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAtBO;;AAyBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASmD,+BAAT,CAAyCxC,WAAzC,EAAwJ;AACvJ,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACuB,WAAP,CAAwF0B,4BAAxF,EAAsHtC,OAAtH,CAAP;AACD;AAIP,OAAO,MAAMwC,sBAAsB,GAAGpD,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAvBO;;AA0BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASqD,yBAAT,CAAmC1C,WAAnC,EAAsI;AACrI,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACuB,WAAP,CAA4E4B,sBAA5E,EAAoGxC,OAApG,CAAP;AACD;AAIP,OAAO,MAAM0C,mBAAmB,GAAGtD,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KApBO;;AAuBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASuD,sBAAT,CAAgC5C,WAAhC,EAA6H;AAC5H,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACuB,WAAP,CAAsE8B,mBAAtE,EAA2F1C,OAA3F,CAAP;AACD;AAIP,OAAO,MAAM4C,kBAAkB,GAAGxD,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KApBO;;AAuBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASyD,qBAAT,CAA+B9C,WAA/B,EAA0H;AACzH,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACuB,WAAP,CAAoEgC,kBAApE,EAAwF5C,OAAxF,CAAP;AACD;AAIP,OAAO,MAAM8C,YAAY,GAAG1D,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KARO;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS2D,YAAT,CAAsBhD,WAAtB,EAA2F;AAC1F,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACY,QAAP,CAA+C6C,YAA/C,EAA6D9C,OAA7D,CAAP;AACD;AACP,OAAO,SAASgD,gBAAT,CAA0BjD,WAA1B,EAAoG;AACjG,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACc,YAAP,CAAmD2C,YAAnD,EAAiE9C,OAAjE,CAAP;AACD;AAIT,OAAO,MAAMiD,mBAAmB,GAAG7D,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KARO;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS8D,mBAAT,CAA6BnD,WAA7B,EAAgH;AAC/G,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACY,QAAP,CAA6DgD,mBAA7D,EAAkFjD,OAAlF,CAAP;AACD;AACP,OAAO,SAASmD,uBAAT,CAAiCpD,WAAjC,EAAyH;AACtH,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACc,YAAP,CAAiE8C,mBAAjE,EAAsFjD,OAAtF,CAAP;AACD;AAIT,OAAO,MAAMoD,2BAA2B,GAAGhE,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAjBO;AAmBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASiE,2BAAT,CAAqCtD,WAArC,EAAwI;AACvI,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACY,QAAP,CAA6EmD,2BAA7E,EAA0GpD,OAA1G,CAAP;AACD;AACP,OAAO,SAASsD,+BAAT,CAAyCvD,WAAzC,EAAiJ;AAC9I,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACc,YAAP,CAAiFiD,2BAAjF,EAA8GpD,OAA9G,CAAP;AACD;AAIT,OAAO,MAAMuD,oBAAoB,GAAGnE,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAhBO;AAkBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASoE,2BAAT,CAAqCzD,WAArC,EAA+I;AAC9I,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACoE,eAAP,CAAoFF,oBAApF,EAA0GvD,OAA1G,CAAP;AACD;AAGP,OAAO,MAAM0D,2BAA2B,GAAGtE,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAlBO;AAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASuE,2BAAT,CAAqC5D,WAArC,EAAwI;AACvI,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACY,QAAP,CAA6EyD,2BAA7E,EAA0G1D,OAA1G,CAAP;AACD;AACP,OAAO,SAAS4D,+BAAT,CAAyC7D,WAAzC,EAAiJ;AAC9I,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACc,YAAP,CAAiFuD,2BAAjF,EAA8G1D,OAA9G,CAAP;AACD;AAIT,OAAO,MAAM6D,4BAA4B,GAAGzE,GAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAvBO;AAyBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS0E,4BAAT,CAAsC/D,WAAtC,EAA2I;AAC1I,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACY,QAAP,CAA+E4D,4BAA/E,EAA6G7D,OAA7G,CAAP;AACD;AACP,OAAO,SAAS+D,gCAAT,CAA0ChE,WAA1C,EAAoJ;AACjJ,QAAMC,OAAO,GAAG,EAAC,GAAGV,cAAJ;AAAoB,OAAGS;AAAvB,GAAhB;AACA,SAAOV,MAAM,CAACc,YAAP,CAAmF0D,4BAAnF,EAAiH7D,OAAjH,CAAP;AACD","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */\n  DateTime: any;\n  /** A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/. */\n  EmailAddress: any;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\nexport type CommunicationTask = {\n  __typename?: 'CommunicationTask';\n  id: Scalars['ID'];\n  user: User;\n  fromUser?: Maybe<User>;\n  date: Scalars['String'];\n  description: Scalars['String'];\n  title: Scalars['String'];\n  status: Status;\n  pending: Scalars['Boolean'];\n  index: Scalars['Float'];\n  workTime: Scalars['String'];\n  email: Scalars['String'];\n  phoneNumber: Scalars['String'];\n};\n\nexport type CommunicationTaskManyInput = {\n  userId: Scalars['ID'];\n  dateFrom: Scalars['DateTime'];\n  dateTo: Scalars['DateTime'];\n};\n\nexport type CommunicationTaskPage = {\n  __typename?: 'CommunicationTaskPage';\n  total: Scalars['Int'];\n  items: Array<CommunicationTask>;\n};\n\nexport type CreateCommunicationTaskInput = {\n  workTime: Scalars['String'];\n  email: Scalars['String'];\n  phoneNumber: Scalars['String'];\n};\n\nexport type CreateMeetingTaskInput = {\n  endTime: Scalars['String'];\n  startTime: Scalars['String'];\n  address: Scalars['String'];\n  category: Scalars['String'];\n};\n\nexport type CreateNotificationInput = {\n  type: Scalars['String'];\n  toUser: Scalars['ID'];\n  fromUser: Scalars['ID'];\n};\n\nexport type CreateTaskInput = {\n  id: Scalars['ID'];\n  fromUserId?: Maybe<Scalars['ID']>;\n  userId: Scalars['ID'];\n  date: Scalars['String'];\n  description: Scalars['String'];\n  title: Scalars['String'];\n  status: Status;\n  index: Scalars['Float'];\n  meetingTask?: Maybe<CreateMeetingTaskInput>;\n  workTask?: Maybe<CreateWorkTaskInput>;\n  communicationTask?: Maybe<CreateCommunicationTaskInput>;\n};\n\nexport type CreateTeamInput = {\n  id: Scalars['ID'];\n  ownerId: Scalars['ID'];\n  members: Array<Scalars['ID']>;\n  name: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type CreateTeamMeetingInput = {\n  fromUserId: Scalars['ID'];\n  teamId: Scalars['ID'];\n  members: Array<Scalars['ID']>;\n  date: Scalars['DateTime'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  endTime?: Maybe<Scalars['String']>;\n  startTime?: Maybe<Scalars['String']>;\n  address?: Maybe<Scalars['String']>;\n  category?: Maybe<Scalars['String']>;\n};\n\nexport type CreateUserInput = {\n  id: Scalars['ID'];\n  email: Scalars['EmailAddress'];\n  name: Scalars['String'];\n};\n\nexport type CreateWorkTaskInput = {\n  workTime: Scalars['String'];\n};\n\n\nexport type EditTaskInput = {\n  id: Scalars['ID'];\n  userId: Scalars['ID'];\n  index?: Maybe<Scalars['Float']>;\n  date?: Maybe<Scalars['DateTime']>;\n  description?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  status?: Maybe<Status>;\n  pending?: Maybe<Scalars['Boolean']>;\n  meetingTask?: Maybe<CreateMeetingTaskInput>;\n  workTask?: Maybe<CreateWorkTaskInput>;\n  communicationTask?: Maybe<CreateCommunicationTaskInput>;\n};\n\nexport type EditUserInput = {\n  id: Scalars['ID'];\n  email?: Maybe<Scalars['EmailAddress']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n\nexport type InviteTeamMemberInput = {\n  fromUserId: Scalars['ID'];\n  toUserId: Scalars['ID'];\n  teamId: Scalars['ID'];\n};\n\nexport type MeetingTask = {\n  __typename?: 'MeetingTask';\n  id: Scalars['ID'];\n  user: User;\n  fromUser?: Maybe<User>;\n  date: Scalars['String'];\n  description: Scalars['String'];\n  title: Scalars['String'];\n  status: Status;\n  pending: Scalars['Boolean'];\n  index: Scalars['Float'];\n  endTime: Scalars['String'];\n  startTime: Scalars['String'];\n  address: Scalars['String'];\n  category: Scalars['String'];\n};\n\nexport type MeetingTaskManyInput = {\n  userId: Scalars['ID'];\n  dateFrom: Scalars['DateTime'];\n  dateTo: Scalars['DateTime'];\n};\n\nexport type MeetingTaskPage = {\n  __typename?: 'MeetingTaskPage';\n  total: Scalars['Int'];\n  items: Array<MeetingTask>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createUser: User;\n  editUser: User;\n  createTask: Task;\n  editTask: Task;\n  deleteTask: Scalars['Boolean'];\n  createNotification: Notification;\n  acknowledgeNotifications: Array<Notification>;\n  createTeam: Team;\n  inviteTeamMember: Scalars['Boolean'];\n  createTeamMeeting: TeamMeeting;\n};\n\n\nexport type MutationCreateUserArgs = {\n  input: CreateUserInput;\n};\n\n\nexport type MutationEditUserArgs = {\n  input: EditUserInput;\n};\n\n\nexport type MutationCreateTaskArgs = {\n  input: CreateTaskInput;\n};\n\n\nexport type MutationEditTaskArgs = {\n  input: EditTaskInput;\n};\n\n\nexport type MutationDeleteTaskArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationCreateNotificationArgs = {\n  input: CreateNotificationInput;\n};\n\n\nexport type MutationAcknowledgeNotificationsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type MutationCreateTeamArgs = {\n  input: CreateTeamInput;\n};\n\n\nexport type MutationInviteTeamMemberArgs = {\n  input: InviteTeamMemberInput;\n};\n\n\nexport type MutationCreateTeamMeetingArgs = {\n  input: CreateTeamMeetingInput;\n};\n\nexport type Notification = {\n  __typename?: 'Notification';\n  id: Scalars['ID'];\n  fromUser?: Maybe<User>;\n  toUser?: Maybe<User>;\n  type: Scalars['String'];\n  date: Scalars['DateTime'];\n  acknowledged: Scalars['Boolean'];\n  team?: Maybe<Team>;\n};\n\nexport type PendingTaskPage = {\n  __typename?: 'PendingTaskPage';\n  total: Scalars['Int'];\n  items: Array<Task>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  user: User;\n  userByEmail?: Maybe<User>;\n  communicationTaskMany: CommunicationTaskPage;\n  meetingTaskMany: MeetingTaskPage;\n  workTaskMany: WorkTaskPage;\n  pendingTaskMany: PendingTaskPage;\n  userNotificationMany: UserNotificationManyPage;\n  team: Team;\n  teamMany: TeamManyPage;\n  usersMeetingTaskMany: UserMeetingTasksPage;\n  teamMeetingTaskMany: TeamMeetingTaskManyPage;\n};\n\n\nexport type QueryUserArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryUserByEmailArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type QueryCommunicationTaskManyArgs = {\n  input: CommunicationTaskManyInput;\n};\n\n\nexport type QueryMeetingTaskManyArgs = {\n  input: MeetingTaskManyInput;\n};\n\n\nexport type QueryWorkTaskManyArgs = {\n  input: WorkTaskManyInput;\n};\n\n\nexport type QueryPendingTaskManyArgs = {\n  userId: Scalars['ID'];\n};\n\n\nexport type QueryUserNotificationManyArgs = {\n  input: UserNotificationManyInput;\n};\n\n\nexport type QueryTeamArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryTeamManyArgs = {\n  ownerId: Scalars['ID'];\n};\n\n\nexport type QueryUsersMeetingTaskManyArgs = {\n  input: UsersMeetingTaskManyInput;\n};\n\n\nexport type QueryTeamMeetingTaskManyArgs = {\n  input: TeamMeetingTaskManyInput;\n};\n\nexport enum Status {\n  Done = 'DONE',\n  NotDone = 'NOT_DONE',\n  InProgress = 'IN_PROGRESS'\n}\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  notification?: Maybe<Notification>;\n};\n\n\nexport type SubscriptionNotificationArgs = {\n  userId: Scalars['ID'];\n};\n\nexport type Task = CommunicationTask | MeetingTask | WorkTask;\n\nexport type Team = {\n  __typename?: 'Team';\n  id: Scalars['ID'];\n  owner?: Maybe<User>;\n  members: Array<User>;\n  name: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type TeamManyPage = {\n  __typename?: 'TeamManyPage';\n  total: Scalars['Int'];\n  items: Array<Maybe<Team>>;\n};\n\nexport type TeamMeeting = {\n  __typename?: 'TeamMeeting';\n  meetingId: Scalars['ID'];\n  team?: Maybe<Team>;\n  fromUser?: Maybe<User>;\n  members: Array<Maybe<User>>;\n  createdAt: Scalars['DateTime'];\n  date: Scalars['DateTime'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  endTime?: Maybe<Scalars['String']>;\n  startTime?: Maybe<Scalars['String']>;\n  address?: Maybe<Scalars['String']>;\n  category?: Maybe<Scalars['String']>;\n};\n\nexport type TeamMeetingTaskManyFilter = {\n  teamId: Scalars['ID'];\n  dateFrom: Scalars['DateTime'];\n  dateTo: Scalars['DateTime'];\n};\n\nexport type TeamMeetingTaskManyInput = {\n  filter: TeamMeetingTaskManyFilter;\n};\n\nexport type TeamMeetingTaskManyPage = {\n  __typename?: 'TeamMeetingTaskManyPage';\n  total: Scalars['Int'];\n  items: Array<TeamMeeting>;\n};\n\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  email: Scalars['EmailAddress'];\n};\n\nexport type UserMeetingTasks = {\n  __typename?: 'UserMeetingTasks';\n  user: User;\n  meetingTasks: MeetingTaskPage;\n};\n\nexport type UserMeetingTasksPage = {\n  __typename?: 'UserMeetingTasksPage';\n  total: Scalars['Int'];\n  items: Array<UserMeetingTasks>;\n};\n\nexport type UserNotificationManyInput = {\n  userId: Scalars['ID'];\n  limit?: Maybe<Scalars['Int']>;\n};\n\nexport type UserNotificationManyPage = {\n  __typename?: 'UserNotificationManyPage';\n  total: Scalars['Int'];\n  items: Array<Notification>;\n};\n\nexport type UsersMeetingTaskManyInput = {\n  userIds: Array<Scalars['String']>;\n  dateFrom: Scalars['DateTime'];\n  dateTo: Scalars['DateTime'];\n};\n\nexport type WorkTask = {\n  __typename?: 'WorkTask';\n  id: Scalars['ID'];\n  user: User;\n  fromUser?: Maybe<User>;\n  date: Scalars['String'];\n  description: Scalars['String'];\n  title: Scalars['String'];\n  status: Status;\n  pending: Scalars['Boolean'];\n  index: Scalars['Float'];\n  workTime: Scalars['String'];\n};\n\nexport type WorkTaskManyInput = {\n  userId: Scalars['ID'];\n  dateFrom: Scalars['DateTime'];\n  dateTo: Scalars['DateTime'];\n};\n\nexport type WorkTaskPage = {\n  __typename?: 'WorkTaskPage';\n  total: Scalars['Int'];\n  items: Array<WorkTask>;\n};\n\nexport type NewCommTaskFragment = (\n  { __typename?: 'CommunicationTask' }\n  & Pick<CommunicationTask, 'id' | 'date' | 'description' | 'title' | 'status' | 'pending' | 'workTime' | 'email' | 'phoneNumber'>\n  & { user: (\n    { __typename?: 'User' }\n    & Pick<User, 'id'>\n  ) }\n);\n\nexport type NewMeetingTaskFragment = (\n  { __typename?: 'MeetingTask' }\n  & Pick<MeetingTask, 'id' | 'date' | 'description' | 'title' | 'status' | 'pending' | 'endTime' | 'startTime' | 'address' | 'category'>\n  & { user: (\n    { __typename?: 'User' }\n    & Pick<User, 'id'>\n  ) }\n);\n\nexport type NewWorkTaskFragment = (\n  { __typename?: 'WorkTask' }\n  & Pick<WorkTask, 'id' | 'date' | 'description' | 'title' | 'status' | 'pending' | 'workTime'>\n  & { user: (\n    { __typename?: 'User' }\n    & Pick<User, 'id'>\n  ) }\n);\n\nexport type MeetingTasksQueryVariables = Exact<{\n  dateFrom: Scalars['DateTime'];\n  dateTo: Scalars['DateTime'];\n  userId: Scalars['ID'];\n}>;\n\n\nexport type MeetingTasksQuery = (\n  { __typename?: 'Query' }\n  & { meetingTaskMany: (\n    { __typename?: 'MeetingTaskPage' }\n    & { items: Array<(\n      { __typename?: 'MeetingTask' }\n      & Pick<MeetingTask, 'id' | 'pending' | 'date' | 'description' | 'index' | 'title' | 'status' | 'endTime' | 'startTime' | 'address' | 'category'>\n      & { user: (\n        { __typename?: 'User' }\n        & Pick<User, 'id'>\n      ) }\n    )> }\n  ) }\n);\n\nexport type WorkTasksQueryVariables = Exact<{\n  dateFrom: Scalars['DateTime'];\n  dateTo: Scalars['DateTime'];\n  userId: Scalars['ID'];\n}>;\n\n\nexport type WorkTasksQuery = (\n  { __typename?: 'Query' }\n  & { workTaskMany: (\n    { __typename?: 'WorkTaskPage' }\n    & { items: Array<(\n      { __typename?: 'WorkTask' }\n      & Pick<WorkTask, 'id' | 'pending' | 'date' | 'description' | 'index' | 'title' | 'status' | 'workTime'>\n      & { user: (\n        { __typename?: 'User' }\n        & Pick<User, 'id'>\n      ) }\n    )> }\n  ) }\n);\n\nexport type CommTasksQueryVariables = Exact<{\n  dateFrom: Scalars['DateTime'];\n  dateTo: Scalars['DateTime'];\n  userId: Scalars['ID'];\n}>;\n\n\nexport type CommTasksQuery = (\n  { __typename?: 'Query' }\n  & { communicationTaskMany: (\n    { __typename?: 'CommunicationTaskPage' }\n    & { items: Array<(\n      { __typename?: 'CommunicationTask' }\n      & Pick<CommunicationTask, 'id' | 'pending' | 'date' | 'description' | 'index' | 'title' | 'status' | 'workTime' | 'email' | 'phoneNumber'>\n      & { user: (\n        { __typename?: 'User' }\n        & Pick<User, 'id'>\n      ) }\n    )> }\n  ) }\n);\n\nexport type EditMeetingTaskDateMutationVariables = Exact<{\n  id: Scalars['ID'];\n  userId: Scalars['ID'];\n  date: Scalars['DateTime'];\n  index: Scalars['Float'];\n}>;\n\n\nexport type EditMeetingTaskDateMutation = (\n  { __typename?: 'Mutation' }\n  & { editTask: { __typename?: 'CommunicationTask' } | (\n    { __typename?: 'MeetingTask' }\n    & Pick<MeetingTask, 'id' | 'pending' | 'date' | 'description' | 'index' | 'title' | 'status' | 'endTime' | 'startTime' | 'address' | 'category'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id'>\n    ) }\n  ) | { __typename?: 'WorkTask' } }\n);\n\nexport type EditCommTaskDateMutationVariables = Exact<{\n  id: Scalars['ID'];\n  userId: Scalars['ID'];\n  date: Scalars['DateTime'];\n  index: Scalars['Float'];\n}>;\n\n\nexport type EditCommTaskDateMutation = (\n  { __typename?: 'Mutation' }\n  & { editTask: (\n    { __typename?: 'CommunicationTask' }\n    & Pick<CommunicationTask, 'id' | 'pending' | 'date' | 'description' | 'index' | 'title' | 'status' | 'workTime' | 'email' | 'phoneNumber'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id'>\n    ) }\n  ) | { __typename?: 'MeetingTask' } | { __typename?: 'WorkTask' } }\n);\n\nexport type EditWorkTaskDateMutationVariables = Exact<{\n  id: Scalars['ID'];\n  userId: Scalars['ID'];\n  date: Scalars['DateTime'];\n  index: Scalars['Float'];\n}>;\n\n\nexport type EditWorkTaskDateMutation = (\n  { __typename?: 'Mutation' }\n  & { editTask: { __typename?: 'CommunicationTask' } | { __typename?: 'MeetingTask' } | (\n    { __typename?: 'WorkTask' }\n    & Pick<WorkTask, 'id' | 'pending' | 'date' | 'description' | 'index' | 'title' | 'status' | 'workTime'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id'>\n    ) }\n  ) }\n);\n\nexport type EditWorkTaskStatusMutationVariables = Exact<{\n  id: Scalars['ID'];\n  userId: Scalars['ID'];\n  date: Scalars['DateTime'];\n  status: Status;\n}>;\n\n\nexport type EditWorkTaskStatusMutation = (\n  { __typename?: 'Mutation' }\n  & { editTask: { __typename?: 'CommunicationTask' } | { __typename?: 'MeetingTask' } | (\n    { __typename?: 'WorkTask' }\n    & Pick<WorkTask, 'id' | 'pending' | 'date' | 'description' | 'title' | 'status' | 'workTime'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id'>\n    ) }\n  ) }\n);\n\nexport type EditWorkTaskMutationVariables = Exact<{\n  id: Scalars['ID'];\n  userId: Scalars['ID'];\n  date: Scalars['DateTime'];\n  title: Scalars['String'];\n  status: Status;\n  description: Scalars['String'];\n  workTime: Scalars['String'];\n  pending: Scalars['Boolean'];\n}>;\n\n\nexport type EditWorkTaskMutation = (\n  { __typename?: 'Mutation' }\n  & { editTask: { __typename?: 'CommunicationTask' } | { __typename?: 'MeetingTask' } | (\n    { __typename?: 'WorkTask' }\n    & Pick<WorkTask, 'id' | 'date' | 'description' | 'title' | 'status' | 'workTime'>\n  ) }\n);\n\nexport type EditMeetingTaskMutationVariables = Exact<{\n  id: Scalars['ID'];\n  userId: Scalars['ID'];\n  date: Scalars['DateTime'];\n  title: Scalars['String'];\n  status: Status;\n  description: Scalars['String'];\n  endTime: Scalars['String'];\n  startTime: Scalars['String'];\n  address: Scalars['String'];\n  category: Scalars['String'];\n  pending: Scalars['Boolean'];\n}>;\n\n\nexport type EditMeetingTaskMutation = (\n  { __typename?: 'Mutation' }\n  & { editTask: { __typename?: 'CommunicationTask' } | (\n    { __typename?: 'MeetingTask' }\n    & Pick<MeetingTask, 'id' | 'date' | 'description' | 'title' | 'status' | 'endTime' | 'startTime' | 'address' | 'category'>\n  ) | { __typename?: 'WorkTask' } }\n);\n\nexport type DeleteMeetingTaskMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteMeetingTaskMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteTask'>\n);\n\nexport type DeleteWorkTaskMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteWorkTaskMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteTask'>\n);\n\nexport type EditCommTaskMutationVariables = Exact<{\n  id: Scalars['ID'];\n  userId: Scalars['ID'];\n  date: Scalars['DateTime'];\n  title: Scalars['String'];\n  status: Status;\n  description: Scalars['String'];\n  workTime: Scalars['String'];\n  phoneNumber: Scalars['String'];\n  email: Scalars['String'];\n  pending: Scalars['Boolean'];\n}>;\n\n\nexport type EditCommTaskMutation = (\n  { __typename?: 'Mutation' }\n  & { editTask: (\n    { __typename?: 'CommunicationTask' }\n    & Pick<CommunicationTask, 'id' | 'date' | 'description' | 'title' | 'status' | 'workTime' | 'phoneNumber' | 'email'>\n  ) | { __typename?: 'MeetingTask' } | { __typename?: 'WorkTask' } }\n);\n\nexport type DeleteCommTaskMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteCommTaskMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteTask'>\n);\n\nexport type EditMeetingTaskStatusMutationVariables = Exact<{\n  id: Scalars['ID'];\n  userId: Scalars['ID'];\n  date: Scalars['DateTime'];\n  status: Status;\n}>;\n\n\nexport type EditMeetingTaskStatusMutation = (\n  { __typename?: 'Mutation' }\n  & { editTask: { __typename?: 'CommunicationTask' } | (\n    { __typename?: 'MeetingTask' }\n    & Pick<MeetingTask, 'id' | 'date' | 'status'>\n  ) | { __typename?: 'WorkTask' } }\n);\n\nexport type EditCommTaskStatusMutationVariables = Exact<{\n  id: Scalars['ID'];\n  userId: Scalars['ID'];\n  date: Scalars['DateTime'];\n  status: Status;\n}>;\n\n\nexport type EditCommTaskStatusMutation = (\n  { __typename?: 'Mutation' }\n  & { editTask: (\n    { __typename?: 'CommunicationTask' }\n    & Pick<CommunicationTask, 'id' | 'date' | 'status'>\n  ) | { __typename?: 'MeetingTask' } | { __typename?: 'WorkTask' } }\n);\n\nexport type TeamManyQueryVariables = Exact<{\n  userId: Scalars['ID'];\n}>;\n\n\nexport type TeamManyQuery = (\n  { __typename?: 'Query' }\n  & { teamMany: (\n    { __typename?: 'TeamManyPage' }\n    & Pick<TeamManyPage, 'total'>\n    & { items: Array<Maybe<(\n      { __typename?: 'Team' }\n      & Pick<Team, 'id' | 'name' | 'description'>\n      & { owner?: Maybe<(\n        { __typename?: 'User' }\n        & Pick<User, 'id' | 'name' | 'email'>\n      )>, members: Array<(\n        { __typename?: 'User' }\n        & Pick<User, 'id' | 'name' | 'email'>\n      )> }\n    )>> }\n  ) }\n);\n\nexport type AddCommunicationTaskMutationVariables = Exact<{\n  id: Scalars['ID'];\n  userId: Scalars['ID'];\n  date: Scalars['String'];\n  title: Scalars['String'];\n  status: Status;\n  description: Scalars['String'];\n  index: Scalars['Float'];\n  workTime: Scalars['String'];\n  email: Scalars['String'];\n  phoneNumber: Scalars['String'];\n}>;\n\n\nexport type AddCommunicationTaskMutation = (\n  { __typename?: 'Mutation' }\n  & { createTask: (\n    { __typename?: 'CommunicationTask' }\n    & Pick<CommunicationTask, 'id' | 'pending' | 'date' | 'description' | 'index' | 'title' | 'status' | 'workTime' | 'email' | 'phoneNumber'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id'>\n    ) }\n  ) | { __typename?: 'MeetingTask' } | { __typename?: 'WorkTask' } }\n);\n\nexport type AddMeetingTaskMutationVariables = Exact<{\n  id: Scalars['ID'];\n  userId: Scalars['ID'];\n  date: Scalars['String'];\n  title: Scalars['String'];\n  status: Status;\n  description: Scalars['String'];\n  index: Scalars['Float'];\n  endTime: Scalars['String'];\n  startTime: Scalars['String'];\n  address: Scalars['String'];\n  category: Scalars['String'];\n}>;\n\n\nexport type AddMeetingTaskMutation = (\n  { __typename?: 'Mutation' }\n  & { createTask: { __typename?: 'CommunicationTask' } | (\n    { __typename?: 'MeetingTask' }\n    & Pick<MeetingTask, 'id' | 'pending' | 'date' | 'description' | 'index' | 'title' | 'status' | 'endTime' | 'startTime' | 'address' | 'category'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id'>\n    ) }\n  ) | { __typename?: 'WorkTask' } }\n);\n\nexport type AddWorkTaskMutationVariables = Exact<{\n  id: Scalars['ID'];\n  userId: Scalars['ID'];\n  date: Scalars['String'];\n  title: Scalars['String'];\n  index: Scalars['Float'];\n  status: Status;\n  description: Scalars['String'];\n  workTime: Scalars['String'];\n}>;\n\n\nexport type AddWorkTaskMutation = (\n  { __typename?: 'Mutation' }\n  & { createTask: { __typename?: 'CommunicationTask' } | { __typename?: 'MeetingTask' } | (\n    { __typename?: 'WorkTask' }\n    & Pick<WorkTask, 'id' | 'pending' | 'date' | 'description' | 'index' | 'title' | 'status' | 'workTime'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id'>\n    ) }\n  ) }\n);\n\nexport type CreateTeamMutationVariables = Exact<{\n  id: Scalars['ID'];\n  ownerId: Scalars['ID'];\n  members: Array<Scalars['ID']> | Scalars['ID'];\n  name: Scalars['String'];\n  description: Scalars['String'];\n}>;\n\n\nexport type CreateTeamMutation = (\n  { __typename?: 'Mutation' }\n  & { createTeam: (\n    { __typename?: 'Team' }\n    & Pick<Team, 'id' | 'name' | 'description'>\n    & { owner?: Maybe<(\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'name' | 'email'>\n    )>, members: Array<(\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'name' | 'email'>\n    )> }\n  ) }\n);\n\nexport type UserQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type UserQuery = (\n  { __typename?: 'Query' }\n  & { user: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name' | 'email'>\n  ) }\n);\n\nexport type UserByEmailQueryVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type UserByEmailQuery = (\n  { __typename?: 'Query' }\n  & { userByEmail?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name' | 'email'>\n  )> }\n);\n\nexport type TeamMeetingTaskManyQueryVariables = Exact<{\n  teamId: Scalars['ID'];\n  dateFrom: Scalars['DateTime'];\n  dateTo: Scalars['DateTime'];\n}>;\n\n\nexport type TeamMeetingTaskManyQuery = (\n  { __typename?: 'Query' }\n  & { teamMeetingTaskMany: (\n    { __typename?: 'TeamMeetingTaskManyPage' }\n    & Pick<TeamMeetingTaskManyPage, 'total'>\n    & { items: Array<(\n      { __typename?: 'TeamMeeting' }\n      & Pick<TeamMeeting, 'date' | 'title' | 'description' | 'endTime' | 'startTime' | 'address' | 'category'>\n    )> }\n  ) }\n);\n\nexport type NotificationSubscriptionVariables = Exact<{\n  userId: Scalars['ID'];\n}>;\n\n\nexport type NotificationSubscription = (\n  { __typename?: 'Subscription' }\n  & { notification?: Maybe<(\n    { __typename?: 'Notification' }\n    & Pick<Notification, 'id' | 'type' | 'date' | 'acknowledged'>\n    & { fromUser?: Maybe<(\n      { __typename?: 'User' }\n      & Pick<User, 'name'>\n    )>, team?: Maybe<(\n      { __typename?: 'Team' }\n      & Pick<Team, 'id' | 'name'>\n    )> }\n  )> }\n);\n\nexport type GetNotificationManyQueryVariables = Exact<{\n  userId: Scalars['ID'];\n  limit: Scalars['Int'];\n}>;\n\n\nexport type GetNotificationManyQuery = (\n  { __typename?: 'Query' }\n  & { userNotificationMany: (\n    { __typename?: 'UserNotificationManyPage' }\n    & Pick<UserNotificationManyPage, 'total'>\n    & { items: Array<(\n      { __typename?: 'Notification' }\n      & Pick<Notification, 'id' | 'type' | 'date' | 'acknowledged'>\n      & { fromUser?: Maybe<(\n        { __typename?: 'User' }\n        & Pick<User, 'name'>\n      )>, team?: Maybe<(\n        { __typename?: 'Team' }\n        & Pick<Team, 'name'>\n      )> }\n    )> }\n  ) }\n);\n\nexport type UsersTeamMeetingManyQueryVariables = Exact<{\n  userIds: Array<Scalars['String']> | Scalars['String'];\n  dateFrom: Scalars['DateTime'];\n  dateTo: Scalars['DateTime'];\n}>;\n\n\nexport type UsersTeamMeetingManyQuery = (\n  { __typename?: 'Query' }\n  & { usersMeetingTaskMany: (\n    { __typename?: 'UserMeetingTasksPage' }\n    & Pick<UserMeetingTasksPage, 'total'>\n    & { items: Array<(\n      { __typename?: 'UserMeetingTasks' }\n      & { user: (\n        { __typename?: 'User' }\n        & Pick<User, 'name'>\n      ), meetingTasks: (\n        { __typename?: 'MeetingTaskPage' }\n        & Pick<MeetingTaskPage, 'total'>\n        & { items: Array<(\n          { __typename?: 'MeetingTask' }\n          & Pick<MeetingTask, 'id' | 'date' | 'title' | 'startTime' | 'endTime'>\n        )> }\n      ) }\n    )> }\n  ) }\n);\n\nexport type NewTeamFragment = (\n  { __typename?: 'Team' }\n  & Pick<Team, 'id' | 'name' | 'description'>\n  & { owner?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name' | 'email'>\n  )>, members: Array<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name' | 'email'>\n  )> }\n);\n\nexport const NewCommTaskFragmentDoc = gql`\n    fragment NewCommTask on CommunicationTask {\n  id\n  user {\n    id\n  }\n  date\n  description\n  title\n  status\n  pending\n  workTime\n  email\n  phoneNumber\n}\n    `;\nexport const NewMeetingTaskFragmentDoc = gql`\n    fragment NewMeetingTask on MeetingTask {\n  id\n  user {\n    id\n  }\n  date\n  description\n  title\n  status\n  pending\n  endTime\n  startTime\n  address\n  category\n}\n    `;\nexport const NewWorkTaskFragmentDoc = gql`\n    fragment NewWorkTask on WorkTask {\n  id\n  user {\n    id\n  }\n  date\n  description\n  title\n  status\n  pending\n  workTime\n}\n    `;\nexport const NewTeamFragmentDoc = gql`\n    fragment NewTeam on Team {\n  id\n  owner {\n    id\n    name\n    email\n  }\n  members {\n    id\n    name\n    email\n  }\n  name\n  description\n}\n    `;\nexport const MeetingTasksDocument = gql`\n    query meetingTasks($dateFrom: DateTime!, $dateTo: DateTime!, $userId: ID!) {\n  meetingTaskMany(input: {userId: $userId, dateFrom: $dateFrom, dateTo: $dateTo}) {\n    items {\n      id\n      user {\n        id\n      }\n      pending\n      date\n      description\n      index\n      title\n      status\n      endTime\n      startTime\n      address\n      category\n    }\n  }\n}\n    `;\n\n/**\n * __useMeetingTasksQuery__\n *\n * To run a query within a React component, call `useMeetingTasksQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeetingTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeetingTasksQuery({\n *   variables: {\n *      dateFrom: // value for 'dateFrom'\n *      dateTo: // value for 'dateTo'\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useMeetingTasksQuery(baseOptions: Apollo.QueryHookOptions<MeetingTasksQuery, MeetingTasksQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MeetingTasksQuery, MeetingTasksQueryVariables>(MeetingTasksDocument, options);\n      }\nexport function useMeetingTasksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeetingTasksQuery, MeetingTasksQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MeetingTasksQuery, MeetingTasksQueryVariables>(MeetingTasksDocument, options);\n        }\nexport type MeetingTasksQueryHookResult = ReturnType<typeof useMeetingTasksQuery>;\nexport type MeetingTasksLazyQueryHookResult = ReturnType<typeof useMeetingTasksLazyQuery>;\nexport type MeetingTasksQueryResult = Apollo.QueryResult<MeetingTasksQuery, MeetingTasksQueryVariables>;\nexport const WorkTasksDocument = gql`\n    query workTasks($dateFrom: DateTime!, $dateTo: DateTime!, $userId: ID!) {\n  workTaskMany(input: {userId: $userId, dateFrom: $dateFrom, dateTo: $dateTo}) {\n    items {\n      id\n      pending\n      user {\n        id\n      }\n      date\n      description\n      index\n      title\n      status\n      workTime\n    }\n  }\n}\n    `;\n\n/**\n * __useWorkTasksQuery__\n *\n * To run a query within a React component, call `useWorkTasksQuery` and pass it any options that fit your needs.\n * When your component renders, `useWorkTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWorkTasksQuery({\n *   variables: {\n *      dateFrom: // value for 'dateFrom'\n *      dateTo: // value for 'dateTo'\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useWorkTasksQuery(baseOptions: Apollo.QueryHookOptions<WorkTasksQuery, WorkTasksQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<WorkTasksQuery, WorkTasksQueryVariables>(WorkTasksDocument, options);\n      }\nexport function useWorkTasksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<WorkTasksQuery, WorkTasksQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<WorkTasksQuery, WorkTasksQueryVariables>(WorkTasksDocument, options);\n        }\nexport type WorkTasksQueryHookResult = ReturnType<typeof useWorkTasksQuery>;\nexport type WorkTasksLazyQueryHookResult = ReturnType<typeof useWorkTasksLazyQuery>;\nexport type WorkTasksQueryResult = Apollo.QueryResult<WorkTasksQuery, WorkTasksQueryVariables>;\nexport const CommTasksDocument = gql`\n    query commTasks($dateFrom: DateTime!, $dateTo: DateTime!, $userId: ID!) {\n  communicationTaskMany(\n    input: {userId: $userId, dateFrom: $dateFrom, dateTo: $dateTo}\n  ) {\n    items {\n      id\n      pending\n      user {\n        id\n      }\n      date\n      description\n      index\n      title\n      status\n      workTime\n      email\n      phoneNumber\n    }\n  }\n}\n    `;\n\n/**\n * __useCommTasksQuery__\n *\n * To run a query within a React component, call `useCommTasksQuery` and pass it any options that fit your needs.\n * When your component renders, `useCommTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCommTasksQuery({\n *   variables: {\n *      dateFrom: // value for 'dateFrom'\n *      dateTo: // value for 'dateTo'\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useCommTasksQuery(baseOptions: Apollo.QueryHookOptions<CommTasksQuery, CommTasksQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<CommTasksQuery, CommTasksQueryVariables>(CommTasksDocument, options);\n      }\nexport function useCommTasksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CommTasksQuery, CommTasksQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<CommTasksQuery, CommTasksQueryVariables>(CommTasksDocument, options);\n        }\nexport type CommTasksQueryHookResult = ReturnType<typeof useCommTasksQuery>;\nexport type CommTasksLazyQueryHookResult = ReturnType<typeof useCommTasksLazyQuery>;\nexport type CommTasksQueryResult = Apollo.QueryResult<CommTasksQuery, CommTasksQueryVariables>;\nexport const EditMeetingTaskDateDocument = gql`\n    mutation EditMeetingTaskDate($id: ID!, $userId: ID!, $date: DateTime!, $index: Float!) {\n  editTask(input: {id: $id, userId: $userId, date: $date, index: $index}) {\n    ... on MeetingTask {\n      id\n      user {\n        id\n      }\n      pending\n      date\n      description\n      index\n      title\n      status\n      endTime\n      startTime\n      address\n      category\n    }\n  }\n}\n    `;\nexport type EditMeetingTaskDateMutationFn = Apollo.MutationFunction<EditMeetingTaskDateMutation, EditMeetingTaskDateMutationVariables>;\n\n/**\n * __useEditMeetingTaskDateMutation__\n *\n * To run a mutation, you first call `useEditMeetingTaskDateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditMeetingTaskDateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editMeetingTaskDateMutation, { data, loading, error }] = useEditMeetingTaskDateMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      index: // value for 'index'\n *   },\n * });\n */\nexport function useEditMeetingTaskDateMutation(baseOptions?: Apollo.MutationHookOptions<EditMeetingTaskDateMutation, EditMeetingTaskDateMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<EditMeetingTaskDateMutation, EditMeetingTaskDateMutationVariables>(EditMeetingTaskDateDocument, options);\n      }\nexport type EditMeetingTaskDateMutationHookResult = ReturnType<typeof useEditMeetingTaskDateMutation>;\nexport type EditMeetingTaskDateMutationResult = Apollo.MutationResult<EditMeetingTaskDateMutation>;\nexport type EditMeetingTaskDateMutationOptions = Apollo.BaseMutationOptions<EditMeetingTaskDateMutation, EditMeetingTaskDateMutationVariables>;\nexport const EditCommTaskDateDocument = gql`\n    mutation EditCommTaskDate($id: ID!, $userId: ID!, $date: DateTime!, $index: Float!) {\n  editTask(input: {id: $id, userId: $userId, date: $date, index: $index}) {\n    ... on CommunicationTask {\n      id\n      pending\n      user {\n        id\n      }\n      date\n      description\n      index\n      title\n      status\n      workTime\n      email\n      phoneNumber\n    }\n  }\n}\n    `;\nexport type EditCommTaskDateMutationFn = Apollo.MutationFunction<EditCommTaskDateMutation, EditCommTaskDateMutationVariables>;\n\n/**\n * __useEditCommTaskDateMutation__\n *\n * To run a mutation, you first call `useEditCommTaskDateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditCommTaskDateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editCommTaskDateMutation, { data, loading, error }] = useEditCommTaskDateMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      index: // value for 'index'\n *   },\n * });\n */\nexport function useEditCommTaskDateMutation(baseOptions?: Apollo.MutationHookOptions<EditCommTaskDateMutation, EditCommTaskDateMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<EditCommTaskDateMutation, EditCommTaskDateMutationVariables>(EditCommTaskDateDocument, options);\n      }\nexport type EditCommTaskDateMutationHookResult = ReturnType<typeof useEditCommTaskDateMutation>;\nexport type EditCommTaskDateMutationResult = Apollo.MutationResult<EditCommTaskDateMutation>;\nexport type EditCommTaskDateMutationOptions = Apollo.BaseMutationOptions<EditCommTaskDateMutation, EditCommTaskDateMutationVariables>;\nexport const EditWorkTaskDateDocument = gql`\n    mutation EditWorkTaskDate($id: ID!, $userId: ID!, $date: DateTime!, $index: Float!) {\n  editTask(input: {id: $id, userId: $userId, date: $date, index: $index}) {\n    ... on WorkTask {\n      id\n      pending\n      user {\n        id\n      }\n      date\n      description\n      index\n      title\n      status\n      workTime\n    }\n  }\n}\n    `;\nexport type EditWorkTaskDateMutationFn = Apollo.MutationFunction<EditWorkTaskDateMutation, EditWorkTaskDateMutationVariables>;\n\n/**\n * __useEditWorkTaskDateMutation__\n *\n * To run a mutation, you first call `useEditWorkTaskDateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditWorkTaskDateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editWorkTaskDateMutation, { data, loading, error }] = useEditWorkTaskDateMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      index: // value for 'index'\n *   },\n * });\n */\nexport function useEditWorkTaskDateMutation(baseOptions?: Apollo.MutationHookOptions<EditWorkTaskDateMutation, EditWorkTaskDateMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<EditWorkTaskDateMutation, EditWorkTaskDateMutationVariables>(EditWorkTaskDateDocument, options);\n      }\nexport type EditWorkTaskDateMutationHookResult = ReturnType<typeof useEditWorkTaskDateMutation>;\nexport type EditWorkTaskDateMutationResult = Apollo.MutationResult<EditWorkTaskDateMutation>;\nexport type EditWorkTaskDateMutationOptions = Apollo.BaseMutationOptions<EditWorkTaskDateMutation, EditWorkTaskDateMutationVariables>;\nexport const EditWorkTaskStatusDocument = gql`\n    mutation EditWorkTaskStatus($id: ID!, $userId: ID!, $date: DateTime!, $status: Status!) {\n  editTask(input: {id: $id, userId: $userId, date: $date, status: $status}) {\n    ... on WorkTask {\n      id\n      pending\n      user {\n        id\n      }\n      date\n      description\n      title\n      status\n      workTime\n    }\n  }\n}\n    `;\nexport type EditWorkTaskStatusMutationFn = Apollo.MutationFunction<EditWorkTaskStatusMutation, EditWorkTaskStatusMutationVariables>;\n\n/**\n * __useEditWorkTaskStatusMutation__\n *\n * To run a mutation, you first call `useEditWorkTaskStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditWorkTaskStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editWorkTaskStatusMutation, { data, loading, error }] = useEditWorkTaskStatusMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      status: // value for 'status'\n *   },\n * });\n */\nexport function useEditWorkTaskStatusMutation(baseOptions?: Apollo.MutationHookOptions<EditWorkTaskStatusMutation, EditWorkTaskStatusMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<EditWorkTaskStatusMutation, EditWorkTaskStatusMutationVariables>(EditWorkTaskStatusDocument, options);\n      }\nexport type EditWorkTaskStatusMutationHookResult = ReturnType<typeof useEditWorkTaskStatusMutation>;\nexport type EditWorkTaskStatusMutationResult = Apollo.MutationResult<EditWorkTaskStatusMutation>;\nexport type EditWorkTaskStatusMutationOptions = Apollo.BaseMutationOptions<EditWorkTaskStatusMutation, EditWorkTaskStatusMutationVariables>;\nexport const EditWorkTaskDocument = gql`\n    mutation EditWorkTask($id: ID!, $userId: ID!, $date: DateTime!, $title: String!, $status: Status!, $description: String!, $workTime: String!, $pending: Boolean!) {\n  editTask(\n    input: {id: $id, userId: $userId, date: $date, title: $title, status: $status, description: $description, pending: $pending, workTask: {workTime: $workTime}}\n  ) {\n    ... on WorkTask {\n      id\n      date\n      description\n      title\n      status\n      workTime\n    }\n  }\n}\n    `;\nexport type EditWorkTaskMutationFn = Apollo.MutationFunction<EditWorkTaskMutation, EditWorkTaskMutationVariables>;\n\n/**\n * __useEditWorkTaskMutation__\n *\n * To run a mutation, you first call `useEditWorkTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditWorkTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editWorkTaskMutation, { data, loading, error }] = useEditWorkTaskMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      title: // value for 'title'\n *      status: // value for 'status'\n *      description: // value for 'description'\n *      workTime: // value for 'workTime'\n *      pending: // value for 'pending'\n *   },\n * });\n */\nexport function useEditWorkTaskMutation(baseOptions?: Apollo.MutationHookOptions<EditWorkTaskMutation, EditWorkTaskMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<EditWorkTaskMutation, EditWorkTaskMutationVariables>(EditWorkTaskDocument, options);\n      }\nexport type EditWorkTaskMutationHookResult = ReturnType<typeof useEditWorkTaskMutation>;\nexport type EditWorkTaskMutationResult = Apollo.MutationResult<EditWorkTaskMutation>;\nexport type EditWorkTaskMutationOptions = Apollo.BaseMutationOptions<EditWorkTaskMutation, EditWorkTaskMutationVariables>;\nexport const EditMeetingTaskDocument = gql`\n    mutation EditMeetingTask($id: ID!, $userId: ID!, $date: DateTime!, $title: String!, $status: Status!, $description: String!, $endTime: String!, $startTime: String!, $address: String!, $category: String!, $pending: Boolean!) {\n  editTask(\n    input: {id: $id, userId: $userId, date: $date, title: $title, status: $status, description: $description, pending: $pending, meetingTask: {endTime: $endTime, startTime: $startTime, address: $address, category: $category}}\n  ) {\n    ... on MeetingTask {\n      id\n      date\n      description\n      title\n      status\n      endTime\n      startTime\n      address\n      category\n    }\n  }\n}\n    `;\nexport type EditMeetingTaskMutationFn = Apollo.MutationFunction<EditMeetingTaskMutation, EditMeetingTaskMutationVariables>;\n\n/**\n * __useEditMeetingTaskMutation__\n *\n * To run a mutation, you first call `useEditMeetingTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditMeetingTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editMeetingTaskMutation, { data, loading, error }] = useEditMeetingTaskMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      title: // value for 'title'\n *      status: // value for 'status'\n *      description: // value for 'description'\n *      endTime: // value for 'endTime'\n *      startTime: // value for 'startTime'\n *      address: // value for 'address'\n *      category: // value for 'category'\n *      pending: // value for 'pending'\n *   },\n * });\n */\nexport function useEditMeetingTaskMutation(baseOptions?: Apollo.MutationHookOptions<EditMeetingTaskMutation, EditMeetingTaskMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<EditMeetingTaskMutation, EditMeetingTaskMutationVariables>(EditMeetingTaskDocument, options);\n      }\nexport type EditMeetingTaskMutationHookResult = ReturnType<typeof useEditMeetingTaskMutation>;\nexport type EditMeetingTaskMutationResult = Apollo.MutationResult<EditMeetingTaskMutation>;\nexport type EditMeetingTaskMutationOptions = Apollo.BaseMutationOptions<EditMeetingTaskMutation, EditMeetingTaskMutationVariables>;\nexport const DeleteMeetingTaskDocument = gql`\n    mutation DeleteMeetingTask($id: ID!) {\n  deleteTask(id: $id)\n}\n    `;\nexport type DeleteMeetingTaskMutationFn = Apollo.MutationFunction<DeleteMeetingTaskMutation, DeleteMeetingTaskMutationVariables>;\n\n/**\n * __useDeleteMeetingTaskMutation__\n *\n * To run a mutation, you first call `useDeleteMeetingTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteMeetingTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteMeetingTaskMutation, { data, loading, error }] = useDeleteMeetingTaskMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteMeetingTaskMutation(baseOptions?: Apollo.MutationHookOptions<DeleteMeetingTaskMutation, DeleteMeetingTaskMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteMeetingTaskMutation, DeleteMeetingTaskMutationVariables>(DeleteMeetingTaskDocument, options);\n      }\nexport type DeleteMeetingTaskMutationHookResult = ReturnType<typeof useDeleteMeetingTaskMutation>;\nexport type DeleteMeetingTaskMutationResult = Apollo.MutationResult<DeleteMeetingTaskMutation>;\nexport type DeleteMeetingTaskMutationOptions = Apollo.BaseMutationOptions<DeleteMeetingTaskMutation, DeleteMeetingTaskMutationVariables>;\nexport const DeleteWorkTaskDocument = gql`\n    mutation DeleteWorkTask($id: ID!) {\n  deleteTask(id: $id)\n}\n    `;\nexport type DeleteWorkTaskMutationFn = Apollo.MutationFunction<DeleteWorkTaskMutation, DeleteWorkTaskMutationVariables>;\n\n/**\n * __useDeleteWorkTaskMutation__\n *\n * To run a mutation, you first call `useDeleteWorkTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteWorkTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteWorkTaskMutation, { data, loading, error }] = useDeleteWorkTaskMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteWorkTaskMutation(baseOptions?: Apollo.MutationHookOptions<DeleteWorkTaskMutation, DeleteWorkTaskMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteWorkTaskMutation, DeleteWorkTaskMutationVariables>(DeleteWorkTaskDocument, options);\n      }\nexport type DeleteWorkTaskMutationHookResult = ReturnType<typeof useDeleteWorkTaskMutation>;\nexport type DeleteWorkTaskMutationResult = Apollo.MutationResult<DeleteWorkTaskMutation>;\nexport type DeleteWorkTaskMutationOptions = Apollo.BaseMutationOptions<DeleteWorkTaskMutation, DeleteWorkTaskMutationVariables>;\nexport const EditCommTaskDocument = gql`\n    mutation EditCommTask($id: ID!, $userId: ID!, $date: DateTime!, $title: String!, $status: Status!, $description: String!, $workTime: String!, $phoneNumber: String!, $email: String!, $pending: Boolean!) {\n  editTask(\n    input: {id: $id, userId: $userId, date: $date, title: $title, status: $status, description: $description, pending: $pending, communicationTask: {workTime: $workTime, phoneNumber: $phoneNumber, email: $email}}\n  ) {\n    ... on CommunicationTask {\n      id\n      date\n      description\n      title\n      status\n      workTime\n      phoneNumber\n      email\n    }\n  }\n}\n    `;\nexport type EditCommTaskMutationFn = Apollo.MutationFunction<EditCommTaskMutation, EditCommTaskMutationVariables>;\n\n/**\n * __useEditCommTaskMutation__\n *\n * To run a mutation, you first call `useEditCommTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditCommTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editCommTaskMutation, { data, loading, error }] = useEditCommTaskMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      title: // value for 'title'\n *      status: // value for 'status'\n *      description: // value for 'description'\n *      workTime: // value for 'workTime'\n *      phoneNumber: // value for 'phoneNumber'\n *      email: // value for 'email'\n *      pending: // value for 'pending'\n *   },\n * });\n */\nexport function useEditCommTaskMutation(baseOptions?: Apollo.MutationHookOptions<EditCommTaskMutation, EditCommTaskMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<EditCommTaskMutation, EditCommTaskMutationVariables>(EditCommTaskDocument, options);\n      }\nexport type EditCommTaskMutationHookResult = ReturnType<typeof useEditCommTaskMutation>;\nexport type EditCommTaskMutationResult = Apollo.MutationResult<EditCommTaskMutation>;\nexport type EditCommTaskMutationOptions = Apollo.BaseMutationOptions<EditCommTaskMutation, EditCommTaskMutationVariables>;\nexport const DeleteCommTaskDocument = gql`\n    mutation DeleteCommTask($id: ID!) {\n  deleteTask(id: $id)\n}\n    `;\nexport type DeleteCommTaskMutationFn = Apollo.MutationFunction<DeleteCommTaskMutation, DeleteCommTaskMutationVariables>;\n\n/**\n * __useDeleteCommTaskMutation__\n *\n * To run a mutation, you first call `useDeleteCommTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCommTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCommTaskMutation, { data, loading, error }] = useDeleteCommTaskMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteCommTaskMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCommTaskMutation, DeleteCommTaskMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteCommTaskMutation, DeleteCommTaskMutationVariables>(DeleteCommTaskDocument, options);\n      }\nexport type DeleteCommTaskMutationHookResult = ReturnType<typeof useDeleteCommTaskMutation>;\nexport type DeleteCommTaskMutationResult = Apollo.MutationResult<DeleteCommTaskMutation>;\nexport type DeleteCommTaskMutationOptions = Apollo.BaseMutationOptions<DeleteCommTaskMutation, DeleteCommTaskMutationVariables>;\nexport const EditMeetingTaskStatusDocument = gql`\n    mutation EditMeetingTaskStatus($id: ID!, $userId: ID!, $date: DateTime!, $status: Status!) {\n  editTask(input: {id: $id, userId: $userId, date: $date, status: $status}) {\n    ... on MeetingTask {\n      id\n      date\n      status\n    }\n  }\n}\n    `;\nexport type EditMeetingTaskStatusMutationFn = Apollo.MutationFunction<EditMeetingTaskStatusMutation, EditMeetingTaskStatusMutationVariables>;\n\n/**\n * __useEditMeetingTaskStatusMutation__\n *\n * To run a mutation, you first call `useEditMeetingTaskStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditMeetingTaskStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editMeetingTaskStatusMutation, { data, loading, error }] = useEditMeetingTaskStatusMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      status: // value for 'status'\n *   },\n * });\n */\nexport function useEditMeetingTaskStatusMutation(baseOptions?: Apollo.MutationHookOptions<EditMeetingTaskStatusMutation, EditMeetingTaskStatusMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<EditMeetingTaskStatusMutation, EditMeetingTaskStatusMutationVariables>(EditMeetingTaskStatusDocument, options);\n      }\nexport type EditMeetingTaskStatusMutationHookResult = ReturnType<typeof useEditMeetingTaskStatusMutation>;\nexport type EditMeetingTaskStatusMutationResult = Apollo.MutationResult<EditMeetingTaskStatusMutation>;\nexport type EditMeetingTaskStatusMutationOptions = Apollo.BaseMutationOptions<EditMeetingTaskStatusMutation, EditMeetingTaskStatusMutationVariables>;\nexport const EditCommTaskStatusDocument = gql`\n    mutation EditCommTaskStatus($id: ID!, $userId: ID!, $date: DateTime!, $status: Status!) {\n  editTask(input: {id: $id, userId: $userId, date: $date, status: $status}) {\n    ... on CommunicationTask {\n      id\n      date\n      status\n    }\n  }\n}\n    `;\nexport type EditCommTaskStatusMutationFn = Apollo.MutationFunction<EditCommTaskStatusMutation, EditCommTaskStatusMutationVariables>;\n\n/**\n * __useEditCommTaskStatusMutation__\n *\n * To run a mutation, you first call `useEditCommTaskStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditCommTaskStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editCommTaskStatusMutation, { data, loading, error }] = useEditCommTaskStatusMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      status: // value for 'status'\n *   },\n * });\n */\nexport function useEditCommTaskStatusMutation(baseOptions?: Apollo.MutationHookOptions<EditCommTaskStatusMutation, EditCommTaskStatusMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<EditCommTaskStatusMutation, EditCommTaskStatusMutationVariables>(EditCommTaskStatusDocument, options);\n      }\nexport type EditCommTaskStatusMutationHookResult = ReturnType<typeof useEditCommTaskStatusMutation>;\nexport type EditCommTaskStatusMutationResult = Apollo.MutationResult<EditCommTaskStatusMutation>;\nexport type EditCommTaskStatusMutationOptions = Apollo.BaseMutationOptions<EditCommTaskStatusMutation, EditCommTaskStatusMutationVariables>;\nexport const TeamManyDocument = gql`\n    query TeamMany($userId: ID!) {\n  teamMany(ownerId: $userId) {\n    total\n    items {\n      id\n      owner {\n        id\n        name\n        email\n      }\n      members {\n        id\n        name\n        email\n      }\n      name\n      description\n    }\n  }\n}\n    `;\n\n/**\n * __useTeamManyQuery__\n *\n * To run a query within a React component, call `useTeamManyQuery` and pass it any options that fit your needs.\n * When your component renders, `useTeamManyQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTeamManyQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useTeamManyQuery(baseOptions: Apollo.QueryHookOptions<TeamManyQuery, TeamManyQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TeamManyQuery, TeamManyQueryVariables>(TeamManyDocument, options);\n      }\nexport function useTeamManyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TeamManyQuery, TeamManyQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TeamManyQuery, TeamManyQueryVariables>(TeamManyDocument, options);\n        }\nexport type TeamManyQueryHookResult = ReturnType<typeof useTeamManyQuery>;\nexport type TeamManyLazyQueryHookResult = ReturnType<typeof useTeamManyLazyQuery>;\nexport type TeamManyQueryResult = Apollo.QueryResult<TeamManyQuery, TeamManyQueryVariables>;\nexport const AddCommunicationTaskDocument = gql`\n    mutation AddCommunicationTask($id: ID!, $userId: ID!, $date: String!, $title: String!, $status: Status!, $description: String!, $index: Float!, $workTime: String!, $email: String!, $phoneNumber: String!) {\n  createTask(\n    input: {id: $id, userId: $userId, date: $date, title: $title, status: $status, description: $description, index: $index, communicationTask: {workTime: $workTime, email: $email, phoneNumber: $phoneNumber}}\n  ) {\n    ... on CommunicationTask {\n      id\n      pending\n      user {\n        id\n      }\n      date\n      description\n      index\n      title\n      status\n      workTime\n      email\n      phoneNumber\n    }\n  }\n}\n    `;\nexport type AddCommunicationTaskMutationFn = Apollo.MutationFunction<AddCommunicationTaskMutation, AddCommunicationTaskMutationVariables>;\n\n/**\n * __useAddCommunicationTaskMutation__\n *\n * To run a mutation, you first call `useAddCommunicationTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCommunicationTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCommunicationTaskMutation, { data, loading, error }] = useAddCommunicationTaskMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      title: // value for 'title'\n *      status: // value for 'status'\n *      description: // value for 'description'\n *      index: // value for 'index'\n *      workTime: // value for 'workTime'\n *      email: // value for 'email'\n *      phoneNumber: // value for 'phoneNumber'\n *   },\n * });\n */\nexport function useAddCommunicationTaskMutation(baseOptions?: Apollo.MutationHookOptions<AddCommunicationTaskMutation, AddCommunicationTaskMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AddCommunicationTaskMutation, AddCommunicationTaskMutationVariables>(AddCommunicationTaskDocument, options);\n      }\nexport type AddCommunicationTaskMutationHookResult = ReturnType<typeof useAddCommunicationTaskMutation>;\nexport type AddCommunicationTaskMutationResult = Apollo.MutationResult<AddCommunicationTaskMutation>;\nexport type AddCommunicationTaskMutationOptions = Apollo.BaseMutationOptions<AddCommunicationTaskMutation, AddCommunicationTaskMutationVariables>;\nexport const AddMeetingTaskDocument = gql`\n    mutation AddMeetingTask($id: ID!, $userId: ID!, $date: String!, $title: String!, $status: Status!, $description: String!, $index: Float!, $endTime: String!, $startTime: String!, $address: String!, $category: String!) {\n  createTask(\n    input: {id: $id, userId: $userId, date: $date, title: $title, status: $status, description: $description, index: $index, meetingTask: {endTime: $endTime, startTime: $startTime, address: $address, category: $category}}\n  ) {\n    ... on MeetingTask {\n      id\n      user {\n        id\n      }\n      pending\n      date\n      description\n      index\n      title\n      status\n      endTime\n      startTime\n      address\n      category\n    }\n  }\n}\n    `;\nexport type AddMeetingTaskMutationFn = Apollo.MutationFunction<AddMeetingTaskMutation, AddMeetingTaskMutationVariables>;\n\n/**\n * __useAddMeetingTaskMutation__\n *\n * To run a mutation, you first call `useAddMeetingTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddMeetingTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addMeetingTaskMutation, { data, loading, error }] = useAddMeetingTaskMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      title: // value for 'title'\n *      status: // value for 'status'\n *      description: // value for 'description'\n *      index: // value for 'index'\n *      endTime: // value for 'endTime'\n *      startTime: // value for 'startTime'\n *      address: // value for 'address'\n *      category: // value for 'category'\n *   },\n * });\n */\nexport function useAddMeetingTaskMutation(baseOptions?: Apollo.MutationHookOptions<AddMeetingTaskMutation, AddMeetingTaskMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AddMeetingTaskMutation, AddMeetingTaskMutationVariables>(AddMeetingTaskDocument, options);\n      }\nexport type AddMeetingTaskMutationHookResult = ReturnType<typeof useAddMeetingTaskMutation>;\nexport type AddMeetingTaskMutationResult = Apollo.MutationResult<AddMeetingTaskMutation>;\nexport type AddMeetingTaskMutationOptions = Apollo.BaseMutationOptions<AddMeetingTaskMutation, AddMeetingTaskMutationVariables>;\nexport const AddWorkTaskDocument = gql`\n    mutation AddWorkTask($id: ID!, $userId: ID!, $date: String!, $title: String!, $index: Float!, $status: Status!, $description: String!, $workTime: String!) {\n  createTask(\n    input: {id: $id, userId: $userId, date: $date, title: $title, status: $status, description: $description, index: $index, workTask: {workTime: $workTime}}\n  ) {\n    ... on WorkTask {\n      id\n      pending\n      user {\n        id\n      }\n      date\n      description\n      index\n      title\n      status\n      workTime\n    }\n  }\n}\n    `;\nexport type AddWorkTaskMutationFn = Apollo.MutationFunction<AddWorkTaskMutation, AddWorkTaskMutationVariables>;\n\n/**\n * __useAddWorkTaskMutation__\n *\n * To run a mutation, you first call `useAddWorkTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddWorkTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addWorkTaskMutation, { data, loading, error }] = useAddWorkTaskMutation({\n *   variables: {\n *      id: // value for 'id'\n *      userId: // value for 'userId'\n *      date: // value for 'date'\n *      title: // value for 'title'\n *      index: // value for 'index'\n *      status: // value for 'status'\n *      description: // value for 'description'\n *      workTime: // value for 'workTime'\n *   },\n * });\n */\nexport function useAddWorkTaskMutation(baseOptions?: Apollo.MutationHookOptions<AddWorkTaskMutation, AddWorkTaskMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AddWorkTaskMutation, AddWorkTaskMutationVariables>(AddWorkTaskDocument, options);\n      }\nexport type AddWorkTaskMutationHookResult = ReturnType<typeof useAddWorkTaskMutation>;\nexport type AddWorkTaskMutationResult = Apollo.MutationResult<AddWorkTaskMutation>;\nexport type AddWorkTaskMutationOptions = Apollo.BaseMutationOptions<AddWorkTaskMutation, AddWorkTaskMutationVariables>;\nexport const CreateTeamDocument = gql`\n    mutation CreateTeam($id: ID!, $ownerId: ID!, $members: [ID!]!, $name: String!, $description: String!) {\n  createTeam(\n    input: {id: $id, ownerId: $ownerId, members: $members, name: $name, description: $description}\n  ) {\n    id\n    owner {\n      id\n      name\n      email\n    }\n    members {\n      id\n      name\n      email\n    }\n    name\n    description\n  }\n}\n    `;\nexport type CreateTeamMutationFn = Apollo.MutationFunction<CreateTeamMutation, CreateTeamMutationVariables>;\n\n/**\n * __useCreateTeamMutation__\n *\n * To run a mutation, you first call `useCreateTeamMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTeamMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTeamMutation, { data, loading, error }] = useCreateTeamMutation({\n *   variables: {\n *      id: // value for 'id'\n *      ownerId: // value for 'ownerId'\n *      members: // value for 'members'\n *      name: // value for 'name'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useCreateTeamMutation(baseOptions?: Apollo.MutationHookOptions<CreateTeamMutation, CreateTeamMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateTeamMutation, CreateTeamMutationVariables>(CreateTeamDocument, options);\n      }\nexport type CreateTeamMutationHookResult = ReturnType<typeof useCreateTeamMutation>;\nexport type CreateTeamMutationResult = Apollo.MutationResult<CreateTeamMutation>;\nexport type CreateTeamMutationOptions = Apollo.BaseMutationOptions<CreateTeamMutation, CreateTeamMutationVariables>;\nexport const UserDocument = gql`\n    query User($id: ID!) {\n  user(id: $id) {\n    id\n    name\n    email\n  }\n}\n    `;\n\n/**\n * __useUserQuery__\n *\n * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUserQuery(baseOptions: Apollo.QueryHookOptions<UserQuery, UserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UserQuery, UserQueryVariables>(UserDocument, options);\n      }\nexport function useUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserQuery, UserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UserQuery, UserQueryVariables>(UserDocument, options);\n        }\nexport type UserQueryHookResult = ReturnType<typeof useUserQuery>;\nexport type UserLazyQueryHookResult = ReturnType<typeof useUserLazyQuery>;\nexport type UserQueryResult = Apollo.QueryResult<UserQuery, UserQueryVariables>;\nexport const UserByEmailDocument = gql`\n    query UserByEmail($email: String!) {\n  userByEmail(email: $email) {\n    id\n    name\n    email\n  }\n}\n    `;\n\n/**\n * __useUserByEmailQuery__\n *\n * To run a query within a React component, call `useUserByEmailQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserByEmailQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserByEmailQuery({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useUserByEmailQuery(baseOptions: Apollo.QueryHookOptions<UserByEmailQuery, UserByEmailQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UserByEmailQuery, UserByEmailQueryVariables>(UserByEmailDocument, options);\n      }\nexport function useUserByEmailLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserByEmailQuery, UserByEmailQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UserByEmailQuery, UserByEmailQueryVariables>(UserByEmailDocument, options);\n        }\nexport type UserByEmailQueryHookResult = ReturnType<typeof useUserByEmailQuery>;\nexport type UserByEmailLazyQueryHookResult = ReturnType<typeof useUserByEmailLazyQuery>;\nexport type UserByEmailQueryResult = Apollo.QueryResult<UserByEmailQuery, UserByEmailQueryVariables>;\nexport const TeamMeetingTaskManyDocument = gql`\n    query TeamMeetingTaskMany($teamId: ID!, $dateFrom: DateTime!, $dateTo: DateTime!) {\n  teamMeetingTaskMany(\n    input: {filter: {teamId: $teamId, dateFrom: $dateFrom, dateTo: $dateTo}}\n  ) {\n    total\n    items {\n      date\n      title\n      description\n      endTime\n      startTime\n      address\n      category\n    }\n  }\n}\n    `;\n\n/**\n * __useTeamMeetingTaskManyQuery__\n *\n * To run a query within a React component, call `useTeamMeetingTaskManyQuery` and pass it any options that fit your needs.\n * When your component renders, `useTeamMeetingTaskManyQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTeamMeetingTaskManyQuery({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      dateFrom: // value for 'dateFrom'\n *      dateTo: // value for 'dateTo'\n *   },\n * });\n */\nexport function useTeamMeetingTaskManyQuery(baseOptions: Apollo.QueryHookOptions<TeamMeetingTaskManyQuery, TeamMeetingTaskManyQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TeamMeetingTaskManyQuery, TeamMeetingTaskManyQueryVariables>(TeamMeetingTaskManyDocument, options);\n      }\nexport function useTeamMeetingTaskManyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TeamMeetingTaskManyQuery, TeamMeetingTaskManyQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TeamMeetingTaskManyQuery, TeamMeetingTaskManyQueryVariables>(TeamMeetingTaskManyDocument, options);\n        }\nexport type TeamMeetingTaskManyQueryHookResult = ReturnType<typeof useTeamMeetingTaskManyQuery>;\nexport type TeamMeetingTaskManyLazyQueryHookResult = ReturnType<typeof useTeamMeetingTaskManyLazyQuery>;\nexport type TeamMeetingTaskManyQueryResult = Apollo.QueryResult<TeamMeetingTaskManyQuery, TeamMeetingTaskManyQueryVariables>;\nexport const NotificationDocument = gql`\n    subscription Notification($userId: ID!) {\n  notification(userId: $userId) {\n    id\n    fromUser {\n      name\n    }\n    type\n    date\n    acknowledged\n    team {\n      id\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __useNotificationSubscription__\n *\n * To run a query within a React component, call `useNotificationSubscription` and pass it any options that fit your needs.\n * When your component renders, `useNotificationSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNotificationSubscription({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useNotificationSubscription(baseOptions: Apollo.SubscriptionHookOptions<NotificationSubscription, NotificationSubscriptionVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useSubscription<NotificationSubscription, NotificationSubscriptionVariables>(NotificationDocument, options);\n      }\nexport type NotificationSubscriptionHookResult = ReturnType<typeof useNotificationSubscription>;\nexport type NotificationSubscriptionResult = Apollo.SubscriptionResult<NotificationSubscription>;\nexport const GetNotificationManyDocument = gql`\n    query GetNotificationMany($userId: ID!, $limit: Int!) {\n  userNotificationMany(input: {userId: $userId, limit: $limit}) {\n    total\n    items {\n      id\n      fromUser {\n        name\n      }\n      type\n      date\n      acknowledged\n      team {\n        name\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetNotificationManyQuery__\n *\n * To run a query within a React component, call `useGetNotificationManyQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetNotificationManyQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetNotificationManyQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useGetNotificationManyQuery(baseOptions: Apollo.QueryHookOptions<GetNotificationManyQuery, GetNotificationManyQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetNotificationManyQuery, GetNotificationManyQueryVariables>(GetNotificationManyDocument, options);\n      }\nexport function useGetNotificationManyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetNotificationManyQuery, GetNotificationManyQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetNotificationManyQuery, GetNotificationManyQueryVariables>(GetNotificationManyDocument, options);\n        }\nexport type GetNotificationManyQueryHookResult = ReturnType<typeof useGetNotificationManyQuery>;\nexport type GetNotificationManyLazyQueryHookResult = ReturnType<typeof useGetNotificationManyLazyQuery>;\nexport type GetNotificationManyQueryResult = Apollo.QueryResult<GetNotificationManyQuery, GetNotificationManyQueryVariables>;\nexport const UsersTeamMeetingManyDocument = gql`\n    query UsersTeamMeetingMany($userIds: [String!]!, $dateFrom: DateTime!, $dateTo: DateTime!) {\n  usersMeetingTaskMany(\n    input: {userIds: $userIds, dateFrom: $dateFrom, dateTo: $dateTo}\n  ) {\n    total\n    items {\n      user {\n        name\n      }\n      meetingTasks {\n        total\n        items {\n          id\n          date\n          title\n          startTime\n          endTime\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useUsersTeamMeetingManyQuery__\n *\n * To run a query within a React component, call `useUsersTeamMeetingManyQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersTeamMeetingManyQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersTeamMeetingManyQuery({\n *   variables: {\n *      userIds: // value for 'userIds'\n *      dateFrom: // value for 'dateFrom'\n *      dateTo: // value for 'dateTo'\n *   },\n * });\n */\nexport function useUsersTeamMeetingManyQuery(baseOptions: Apollo.QueryHookOptions<UsersTeamMeetingManyQuery, UsersTeamMeetingManyQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UsersTeamMeetingManyQuery, UsersTeamMeetingManyQueryVariables>(UsersTeamMeetingManyDocument, options);\n      }\nexport function useUsersTeamMeetingManyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UsersTeamMeetingManyQuery, UsersTeamMeetingManyQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UsersTeamMeetingManyQuery, UsersTeamMeetingManyQueryVariables>(UsersTeamMeetingManyDocument, options);\n        }\nexport type UsersTeamMeetingManyQueryHookResult = ReturnType<typeof useUsersTeamMeetingManyQuery>;\nexport type UsersTeamMeetingManyLazyQueryHookResult = ReturnType<typeof useUsersTeamMeetingManyLazyQuery>;\nexport type UsersTeamMeetingManyQueryResult = Apollo.QueryResult<UsersTeamMeetingManyQuery, UsersTeamMeetingManyQueryVariables>;"]},"metadata":{},"sourceType":"module"}