{"ast":null,"code":"import React from'react';import moment from'moment';export var getISOWeekDates=function getISOWeekDates(){var isoWeekNum=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;var year=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Date().getFullYear();var d=moment().isoWeek(1).startOf('isoWeek').add(isoWeekNum-1,'weeks');var finalMonth=d.format('MMMM');var tempMonth='';for(var dates=[],i=0;i<7;i++){if(d.format('MMMM')!==finalMonth){tempMonth=d.format('MMMM');}dates.push(d.valueOf());d.add(1,'day');}if(tempMonth!==''){return[dates,finalMonth+' - '+tempMonth+d.format(' YYYY')];}return[dates,finalMonth+d.format(' YYYY')];};","map":{"version":3,"sources":["/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/DateCalc.js"],"names":["React","moment","getISOWeekDates","isoWeekNum","year","Date","getFullYear","d","isoWeek","startOf","add","finalMonth","format","tempMonth","dates","i","push","valueOf"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,QAAnB,CAEA,MAAO,IAAIC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAA0D,IAAjDC,CAAAA,UAAiD,2DAApC,CAAoC,IAAjCC,CAAAA,IAAiC,2DAA1B,GAAIC,CAAAA,IAAJ,GAAWC,WAAX,EAA0B,CACnF,GAAIC,CAAAA,CAAC,CAAGN,MAAM,GAAGO,OAAT,CAAiB,CAAjB,EAAoBC,OAApB,CAA4B,SAA5B,EAAuCC,GAAvC,CAA2CP,UAAU,CAAG,CAAxD,CAA2D,OAA3D,CAAR,CACA,GAAIQ,CAAAA,UAAU,CAAGJ,CAAC,CAACK,MAAF,CAAS,MAAT,CAAjB,CACA,GAAIC,CAAAA,SAAS,CAAG,EAAhB,CAEA,IAAK,GAAIC,CAAAA,KAAK,CAAC,EAAV,CAAcC,CAAC,CAAC,CAArB,CAAwBA,CAAC,CAAG,CAA5B,CAA+BA,CAAC,EAAhC,CAAoC,CAChC,GAAIR,CAAC,CAACK,MAAF,CAAS,MAAT,IAAqBD,UAAzB,CAAqC,CACjCE,SAAS,CAAGN,CAAC,CAACK,MAAF,CAAS,MAAT,CAAZ,CACH,CAEDE,KAAK,CAACE,IAAN,CAAWT,CAAC,CAACU,OAAF,EAAX,EACAV,CAAC,CAACG,GAAF,CAAM,CAAN,CAAS,KAAT,EACH,CAED,GAAIG,SAAS,GAAK,EAAlB,CAAsB,CAClB,MAAO,CAACC,KAAD,CAAQH,UAAU,CAAG,KAAb,CAAqBE,SAArB,CAAiCN,CAAC,CAACK,MAAF,CAAS,OAAT,CAAzC,CAAP,CACH,CAED,MAAO,CAACE,KAAD,CAAQH,UAAU,CAAGJ,CAAC,CAACK,MAAF,CAAS,OAAT,CAArB,CAAP,CAEH,CApBM","sourcesContent":["import React from 'react';\nimport moment from 'moment';\n\nexport let getISOWeekDates = function(isoWeekNum = 1, year = new Date().getFullYear()) {\n    let d = moment().isoWeek(1).startOf('isoWeek').add(isoWeekNum - 1, 'weeks');\n    let finalMonth = d.format('MMMM');\n    let tempMonth = '';\n\n    for (var dates=[], i=0; i < 7; i++) {\n        if (d.format('MMMM') !== finalMonth) {\n            tempMonth = d.format('MMMM');\n        }\n\n        dates.push(d.valueOf());\n        d.add(1, 'day');\n    }\n\n    if (tempMonth !== '') {\n        return [dates, finalMonth + ' - ' + tempMonth + d.format(' YYYY')];\n    }\n\n    return [dates, finalMonth + d.format(' YYYY')];\n    \n};"]},"metadata":{},"sourceType":"module"}