{"ast":null,"code":"var _jsxFileName = \"/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/providers/UserProvider.tsx\";\nimport { useApolloClient } from '@apollo/client';\nimport * as firebase from 'firebase';\nimport React, { createContext, useEffect, useState } from 'react';\nimport { GET_USER } from '../graphql/graphql';\nconst initial = {};\nexport const AuthContext = createContext({\n  currentUser: initial,\n  setCurrentUser: () => undefined\n});\nexport const AuthProvider = ({\n  children\n}) => {\n  const client = useApolloClient();\n  const [currentUser, setCurrentUser] = useState();\n  const [apiUser, setApiUser] = useState();\n  const [pending, setPending] = useState(true);\n  useEffect(() => {\n    async function handleUser() {\n      if (currentUser == null) return;\n      if (apiUser != null) return;\n      const {\n        data: {\n          user\n        }\n      } = await client.query({\n        query: GET_USER,\n        variables: {\n          id: currentUser.uid\n        }\n      });\n      setApiUser({\n        email: user.email,\n        id: user.id,\n        name: user.name\n      });\n      setCurrentUser({ ...currentUser,\n        email: user.email,\n        displayName: user.name\n      });\n    }\n\n    handleUser();\n  }, [currentUser, apiUser, client]);\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(user => {\n      var _user$displayName, _user$email;\n\n      if (user == null) return;\n      setCurrentUser({\n        uid: user.uid,\n        displayName: (_user$displayName = user.displayName) !== null && _user$displayName !== void 0 ? _user$displayName : '',\n        email: (_user$email = user.email) !== null && _user$email !== void 0 ? _user$email : ''\n      });\n      setPending(false);\n    });\n  }, []);\n\n  if (pending) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      currentUser: currentUser,\n      setCurrentUser: setCurrentUser\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/providers/UserProvider.tsx"],"names":["useApolloClient","firebase","React","createContext","useEffect","useState","GET_USER","initial","AuthContext","currentUser","setCurrentUser","undefined","AuthProvider","children","client","apiUser","setApiUser","pending","setPending","handleUser","data","user","query","variables","id","uid","email","name","displayName","auth","onAuthStateChanged"],"mappings":";AAAA,SAASA,eAAT,QAAgC,gBAAhC;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAOC,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AAEA,SAASC,QAAT,QAAyB,oBAAzB;AAQA,MAAMC,OAAO,GAAG,EAAhB;AAEA,OAAO,MAAMC,WAAW,GAAGL,aAAa,CAGrC;AAAEM,EAAAA,WAAW,EAAEF,OAAf;AAAwBG,EAAAA,cAAc,EAAE,MAAMC;AAA9C,CAHqC,CAAjC;AAKP,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC5C,QAAMC,MAAM,GAAGd,eAAe,EAA9B;AAEA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,EAA9C;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,EAAtC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAee,UAAf,GAA4B;AAC1B,UAAIV,WAAW,IAAI,IAAnB,EAAyB;AACzB,UAAIM,OAAO,IAAI,IAAf,EAAqB;AAErB,YAAM;AACJK,QAAAA,IAAI,EAAE;AAAEC,UAAAA;AAAF;AADF,UAEF,MAAMP,MAAM,CAACQ,KAAP,CAAa;AACrBA,QAAAA,KAAK,EAAEhB,QADc;AAErBiB,QAAAA,SAAS,EAAE;AACTC,UAAAA,EAAE,EAAEf,WAAW,CAACgB;AADP;AAFU,OAAb,CAFV;AASAT,MAAAA,UAAU,CAAC;AACTU,QAAAA,KAAK,EAAEL,IAAI,CAACK,KADH;AAETF,QAAAA,EAAE,EAAEH,IAAI,CAACG,EAFA;AAGTG,QAAAA,IAAI,EAAEN,IAAI,CAACM;AAHF,OAAD,CAAV;AAMAjB,MAAAA,cAAc,CAAC,EACb,GAAGD,WADU;AAEbiB,QAAAA,KAAK,EAAEL,IAAI,CAACK,KAFC;AAGbE,QAAAA,WAAW,EAAEP,IAAI,CAACM;AAHL,OAAD,CAAd;AAKD;;AACDR,IAAAA,UAAU;AACX,GA3BQ,EA2BN,CAACV,WAAD,EAAcM,OAAd,EAAuBD,MAAvB,CA3BM,CAAT;AA6BAV,EAAAA,SAAS,CAAC,MAAM;AACdH,IAAAA,QAAQ,CAAC4B,IAAT,GAAgBC,kBAAhB,CAAoCT,IAAD,IAAU;AAAA;;AAC3C,UAAIA,IAAI,IAAI,IAAZ,EAAkB;AAElBX,MAAAA,cAAc,CAAC;AACbe,QAAAA,GAAG,EAAEJ,IAAI,CAACI,GADG;AAEbG,QAAAA,WAAW,uBAAEP,IAAI,CAACO,WAAP,iEAAsB,EAFpB;AAGbF,QAAAA,KAAK,iBAAEL,IAAI,CAACK,KAAP,qDAAgB;AAHR,OAAD,CAAd;AAMAR,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAVD;AAWD,GAZQ,EAYN,EAZM,CAAT;;AAcA,MAAID,OAAJ,EAAa;AACX,wBAAO,yCAAP;AACD;;AAED,sBACE,oBAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLR,MAAAA,WAAW,EAAEA,WADR;AAELC,MAAAA,cAAc,EAAEA;AAFX,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGG,QANH,CADF;AAUD,CAhEM","sourcesContent":["import { useApolloClient } from '@apollo/client';\nimport * as firebase from 'firebase';\nimport React, { createContext, useEffect, useState } from 'react';\nimport { User } from '../generated/graphql';\nimport { GET_USER } from '../graphql/graphql';\n\ninterface AuthUser {\n  uid: string;\n  displayName: string;\n  email: string;\n}\n\nconst initial = {} as AuthUser;\n\nexport const AuthContext = createContext<{\n  currentUser: AuthUser;\n  setCurrentUser: React.Dispatch<React.SetStateAction<AuthUser | undefined>>;\n}>({ currentUser: initial, setCurrentUser: () => undefined });\n\nexport const AuthProvider = ({ children }) => {\n  const client = useApolloClient();\n\n  const [currentUser, setCurrentUser] = useState<AuthUser>();\n  const [apiUser, setApiUser] = useState<User>();\n  const [pending, setPending] = useState(true);\n\n  useEffect(() => {\n    async function handleUser() {\n      if (currentUser == null) return;\n      if (apiUser != null) return;\n\n      const {\n        data: { user }\n      } = await client.query({\n        query: GET_USER,\n        variables: {\n          id: currentUser.uid\n        }\n      });\n\n      setApiUser({\n        email: user.email,\n        id: user.id,\n        name: user.name\n      });\n\n      setCurrentUser({\n        ...currentUser,\n        email: user.email,\n        displayName: user.name\n      });\n    }\n    handleUser();\n  }, [currentUser, apiUser, client]);\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user == null) return;\n\n      setCurrentUser({\n        uid: user.uid,\n        displayName: user.displayName ?? '',\n        email: user.email ?? ''\n      });\n\n      setPending(false);\n    });\n  }, []);\n\n  if (pending) {\n    return <></>;\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser: currentUser as AuthUser,\n        setCurrentUser: setCurrentUser\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}