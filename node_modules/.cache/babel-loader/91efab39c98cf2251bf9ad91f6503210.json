{"ast":null,"code":"var _jsxFileName = \"/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/taskBubble/WorkTaskBubble.js\";\nimport { useStyles } from '../App';\nimport '../App.css';\nimport React, { useContext } from 'react';\nimport { GetTaskStatusData } from './TaskStatusData';\nimport { WorkDetailDialog } from '../dialogWindows/WorkDetailDialog';\nimport Box from '@material-ui/core/Box';\nimport moment from 'moment';\nimport 'moment/locale/sk';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport TimerIcon from '@material-ui/icons/Timer';\nimport { DataContext } from \"../providers/DataProvider\";\nexport function WorkTaskBubble(date) {\n  const classes = useStyles();\n  const {\n    taskData\n  } = useContext(DataContext);\n  let filteredData = [];\n\n  if (taskData.workTasks !== undefined) {\n    filteredData = taskData.workTasks.filter(task => task.date.includes(moment(date).format(\"DD/MM/yyyy\"))); //filter tasks by specified type\n  }\n\n  const [open, setOpen] = React.useState(false);\n  const [selectedTask, setSelectedTask] = React.useState({\n    id: '-1',\n    title: 'Test',\n    desc: 'Test',\n    workTime: '100h',\n    status: 'not_done'\n  });\n\n  const handleClickOpen = task => {\n    setSelectedTask(task);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result; // dropped outside the list\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(this.getList(source.droppableId), source.index, destination.index);\n      let state = {\n        items\n      };\n\n      if (source.droppableId === 'droppable2') {\n        state = {\n          selected: items\n        };\n      }\n\n      this.setState(state);\n    } else {\n      const result = move(this.getList(source.droppableId), this.getList(destination.droppableId), source, destination);\n      this.setState({\n        items: result.droppable,\n        selected: result.droppable2\n      });\n    }\n  };\n\n  if (filteredData === undefined || filteredData.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        justifyContent: \"center\",\n        height: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        textAlign: \"center\",\n        paddingTop: \"18px\",\n        color: \"#bdbdbd\",\n        fontFamily: \"Poppins\",\n        fontSize: \"18px\",\n        fontWeight: \"500\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \"Pr\\xE1zdne\"));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DragDropContext, {\n      onDragEnd: onDragEnd(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Droppable, {\n      droppableId: `${moment(date).unix()}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, provided => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, provided.droppableProps, {\n      ref: provided.innerRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }), filteredData.map((item, index) => /*#__PURE__*/React.createElement(Draggable, {\n      key: item.id,\n      draggableId: item.id,\n      index: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 19\n      }\n    }, provided => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, provided.draggableProps, provided.dragHandleProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(Box, {\n      className: classes.taskBubble,\n      style: {\n        backgroundColor: GetTaskStatusData(item.status).color,\n        transition: 'background-color 1s'\n      },\n      onClick: () => handleClickOpen(item),\n      ref: provided.innerRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      flexGrow: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: classes.bubbleTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 29\n      }\n    }, item.title)), /*#__PURE__*/React.createElement(TimerIcon, {\n      style: {\n        marginRight: '5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 27\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      className: classes.bubbleWorkTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 27\n      }\n    }, item.workTime))))), provided.placeholder))), /*#__PURE__*/React.createElement(WorkDetailDialog, {\n      onClose: handleClose,\n      open: open,\n      selectedTask: selectedTask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n;","map":{"version":3,"sources":["/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/taskBubble/WorkTaskBubble.js"],"names":["useStyles","React","useContext","GetTaskStatusData","WorkDetailDialog","Box","moment","DragDropContext","Droppable","Draggable","TimerIcon","DataContext","WorkTaskBubble","date","classes","taskData","filteredData","workTasks","undefined","filter","task","includes","format","open","setOpen","useState","selectedTask","setSelectedTask","id","title","desc","workTime","status","handleClickOpen","handleClose","onDragEnd","result","source","destination","droppableId","items","reorder","getList","index","state","selected","setState","move","droppable","droppable2","length","justifyContent","height","textAlign","paddingTop","color","fontFamily","fontSize","fontWeight","unix","provided","droppableProps","innerRef","map","item","draggableProps","dragHandleProps","taskBubble","backgroundColor","transition","bubbleTitle","marginRight","bubbleWorkTime","placeholder"],"mappings":"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","sourcesContent":["import { useStyles } from '../App';\nimport '../App.css';\nimport React, { useContext } from 'react';\nimport { GetTaskStatusData } from './TaskStatusData';\nimport { WorkDetailDialog } from '../dialogWindows/WorkDetailDialog';\nimport Box from '@material-ui/core/Box';\nimport moment from 'moment';\nimport 'moment/locale/sk';\n\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport TimerIcon from '@material-ui/icons/Timer';\n\nimport { DataContext } from \"../providers/DataProvider\";\n\n\nexport function WorkTaskBubble(date) {\n  const classes = useStyles();\n\n  const { taskData } = useContext(DataContext);\n\n  let filteredData = [];\n\n  if (taskData.workTasks !== undefined) {\n    filteredData = taskData.workTasks.filter((task) => task.date.includes(moment(date).format(\"DD/MM/yyyy\"))); //filter tasks by specified type\n  }\n  \n  const [open, setOpen] = React.useState(false);\n  const [selectedTask, setSelectedTask] = React.useState({ id: '-1', title: 'Test', desc: 'Test', workTime: '100h', status: 'not_done' });\n\n  const handleClickOpen = (task) => {\n    setSelectedTask(task);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  }\n\n  const onDragEnd = (result) => {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n        return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n        const items = reorder(\n            this.getList(source.droppableId),\n            source.index,\n            destination.index\n        );\n\n        let state = { items };\n\n        if (source.droppableId === 'droppable2') {\n            state = { selected: items };\n        }\n\n        this.setState(state);\n    } else {\n        const result = move(\n            this.getList(source.droppableId),\n            this.getList(destination.droppableId),\n            source,\n            destination\n        );\n\n        this.setState({\n            items: result.droppable,\n            selected: result.droppable2\n        });\n    }\n  };\n\n  if (filteredData === undefined || filteredData.length === 0) {\n    return (\n      <div style={{ justifyContent: \"center\", height: \"100%\" }}>\n        <h3 style={{ textAlign: \"center\", paddingTop: \"18px\", color: \"#bdbdbd\", fontFamily: \"Poppins\", fontSize: \"18px\", fontWeight: \"500\" }}>\n          Prázdne\n        </h3>\n      </div>\n    )\n\n  } else {\n    return (\n      <div>\n        <DragDropContext onDragEnd={onDragEnd()}>\n          <Droppable droppableId={`${moment(date).unix()}`}>\n            {(provided) => (\n              <div {...provided.droppableProps} ref={provided.innerRef}>\n                {filteredData.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index} >\n                    {(provided) => (\n                      <div {...provided.draggableProps} {...provided.dragHandleProps}>\n                        <Box className={classes.taskBubble} style={{ backgroundColor: GetTaskStatusData(item.status).color, transition: 'background-color 1s' }} onClick={() => handleClickOpen(item)} ref={provided.innerRef}>\n                          <Box flexGrow={1}>\n                            <h3 className={classes.bubbleTitle}>{item.title}</h3>\n                          </Box>\n                          <TimerIcon style={{ marginRight: '5px' }} />\n                          <h3 className={classes.bubbleWorkTime}>{item.workTime}</h3>\n                        </Box>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <WorkDetailDialog onClose={handleClose} open={open} selectedTask={selectedTask} />\n      </div>\n    )\n  }\n};"]},"metadata":{},"sourceType":"module"}