{"ast":null,"code":"var _jsxFileName = \"/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/taskBubble/TaskBubble.js\";\nimport { useStyles } from '../App';\nimport '../App.css';\nimport React, { Component } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport Dialog from '@material-ui/core/Dialog';\nimport data from '../MOCK_DATA.json';\nconst styles = makeStyles(theme => ({\n  detailTitle: {\n    fontFamily: 'Poppins',\n    color: '#2b2b2b',\n    fontWeight: '800',\n    fontSize: 23\n  },\n  detailDesc: {\n    fontFamily: 'Poppins',\n    color: '#2b2b2b',\n    fontWeight: '600',\n    fontSize: 15\n  }\n}));\n\nfunction SimpleDialog(props) {\n  const classes = styles();\n  const {\n    onClose,\n    selectedTask,\n    open\n  } = props;\n\n  const handleClose = () => {\n    onClose(selectedTask);\n  };\n\n  return /*#__PURE__*/React.createElement(Dialog, {\n    onClose: handleClose,\n    \"aria-labelledby\": \"simple-dialog-title\",\n    open: open,\n    fullWidth: true,\n    maxWidth: 'xs',\n    PaperProps: {\n      style: {\n        backgroundColor: '#FFEAC8',\n        color: 'black',\n        borderRadius: '30px',\n        padding: '30px',\n        boxShadow: '0px 0px 15px 0px rgba(0,0,0,0.15)'\n      },\n      elevation: 0\n    },\n    BackdropProps: {\n      style: {\n        backgroundColor: \"rgba(0, 0, 0, 0.25)\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: classes.detailTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, selectedTask.title), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: classes.detailDesc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, selectedTask.desc), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      maxWidth: '20px',\n      maxHeight: '20px',\n      minWidth: '20px',\n      minHeight: '20px',\n      marginLeft: '8px'\n    },\n    onClick: addItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(AddIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }))));\n}\n\nSimpleDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  selectedTask: PropTypes.string.isRequired\n};\nexport function TaskBubble(type) {\n  const classes = useStyles();\n  const filteredData = data.filter(task => task.type.includes(type)); //filter tasks by specified type\n\n  const [open, setOpen] = React.useState(false);\n  const [selectedTask, setSelectedTask] = React.useState({\n    id: '0',\n    title: 'Test',\n    desc: 'Test',\n    workTime: '100h',\n    state: '#DFFFEC'\n  });\n\n  const handleClickOpen = task => {\n    setOpen(true);\n    setSelectedTask(task);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, filteredData.map((item, index) => /*#__PURE__*/React.createElement(React.Fragment, {\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    className: classes.taskBubble,\n    style: {\n      backgroundColor: item.state\n    },\n    onClick: () => handleClickOpen(item),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    flexGrow: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: classes.bubbleTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 29\n    }\n  }, item.title)), /*#__PURE__*/React.createElement(TimerIcon, {\n    style: {\n      marginRight: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    className: classes.bubbleWorkTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }, item.workTime)), /*#__PURE__*/React.createElement(SimpleDialog, {\n    open: open,\n    onClose: handleClose,\n    selectedTask: selectedTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }))));\n}\n;","map":{"version":3,"sources":["/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/taskBubble/TaskBubble.js"],"names":["useStyles","React","Component","makeStyles","PropTypes","Box","TimerIcon","Dialog","data","styles","theme","detailTitle","fontFamily","color","fontWeight","fontSize","detailDesc","SimpleDialog","props","classes","onClose","selectedTask","open","handleClose","style","backgroundColor","borderRadius","padding","boxShadow","elevation","title","display","alignItems","justifyContent","desc","maxWidth","maxHeight","minWidth","minHeight","marginLeft","addItem","propTypes","func","isRequired","bool","string","TaskBubble","type","filteredData","filter","task","includes","setOpen","useState","setSelectedTask","id","workTime","state","handleClickOpen","map","item","index","taskBubble","bubbleTitle","marginRight","bubbleWorkTime"],"mappings":"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","sourcesContent":["import { useStyles } from '../App';\nimport '../App.css';\nimport React, { Component } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport Dialog from '@material-ui/core/Dialog';\nimport data from '../MOCK_DATA.json';\n\nconst styles = makeStyles((theme) => ({\n    detailTitle: {\n        fontFamily: 'Poppins',\n        color: '#2b2b2b',\n        fontWeight: '800',\n        fontSize: 23,\n    },\n    detailDesc: {\n        fontFamily: 'Poppins',\n        color: '#2b2b2b',\n        fontWeight: '600',\n        fontSize: 15,\n    }\n}));\n\nfunction SimpleDialog(props) {\n    const classes = styles();\n\n    const { onClose, selectedTask, open } = props;\n  \n    const handleClose = () => {\n      onClose(selectedTask);\n    };\n    \n    return (\n        <Dialog \n            onClose={handleClose} \n            aria-labelledby=\"simple-dialog-title\" \n            open={open} \n            fullWidth={true} \n            maxWidth={'xs'}\n            PaperProps={{ style: { backgroundColor: '#FFEAC8', color:'black', borderRadius:'30px', padding:'30px', boxShadow: '0px 0px 15px 0px rgba(0,0,0,0.15)',}, elevation:0}}\n            BackdropProps={{ style: { backgroundColor: \"rgba(0, 0, 0, 0.25)\" } }}\n        >\n            <h1 className={classes.detailTitle}>{selectedTask.title}</h1>\n            <span style={{display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\n                <h3 className={classes.detailDesc}>\n                    {selectedTask.desc}\n                </h3>\n                <Button style={{maxWidth: '20px', maxHeight: '20px', minWidth: '20px', minHeight: '20px', marginLeft: '8px'}} onClick={addItem}>\n                <AddIcon />\n                </Button>\n            </span>\n               \n        </Dialog>\n    );\n}\n\nSimpleDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    selectedTask: PropTypes.string.isRequired,\n};\n\nexport function TaskBubble(type) {\n    const classes = useStyles();\n\n    const filteredData = data.filter((task) => task.type.includes(type)); //filter tasks by specified type\n\n    const [open, setOpen] = React.useState(false);\n    const [selectedTask, setSelectedTask] = React.useState({ id: '0', title: 'Test', desc: 'Test', workTime: '100h', state: '#DFFFEC' });\n\n    const handleClickOpen = (task) => {\n        setOpen(true);\n        setSelectedTask(task);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    }\n\n    return (\n        <div>\n            {filteredData.map((item, index) => (\n                <React.Fragment key={item.id} >\n                    <Box className={classes.taskBubble} style={{ backgroundColor: item.state }} onClick={() => handleClickOpen(item)}>\n                        <Box flexGrow={1}>\n                            <h3 className={classes.bubbleTitle}>{item.title}</h3>\n                        </Box>\n                        \n                        <TimerIcon style={{marginRight:'5px'}}/>\n                        <h3 className={classes.bubbleWorkTime}>{item.workTime}</h3>\n                    </Box>\n\n                    <SimpleDialog open={open} onClose={handleClose} selectedTask={selectedTask} />\n                </React.Fragment>\n            ))}\n        </div>\n    )\n  };"]},"metadata":{},"sourceType":"module"}