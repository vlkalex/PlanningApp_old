{"ast":null,"code":"var _jsxFileName = \"/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/dialogWindows/MeetDetailDialog.js\";\nimport '../App.css';\nimport './css/dialog.sass';\nimport React, { useState, useContext, useRef, createRef } from 'react';\nimport { GetTaskStatusData } from '../taskBubble/TaskStatusData';\nimport moment from 'moment';\nimport { MeetEditDialog } from './editModeDialogs/MeetEditDialog';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport { MuiPickersUtilsProvider, DatePicker } from \"@material-ui/pickers\";\nimport MomentUtils from '@date-io/moment';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\nimport { FormatAlignLeftIcon, IconButton, CreateIcon, DeleteIcon, CloseIcon, FlagIcon, PlaceIcon, ScheduleIcon, TimerIcon, TodayIcon } from '../imports/icons';\nimport { DataContext } from \"../providers/DataProvider\";\nimport { UserContext } from \"../providers/UserProvider\";\nimport { renderTaskStatusBubble, menuProps } from '../const/dialogConsts';\nexport function MeetDetailDialog(props) {\n  let taskTitleId = useRef(null);\n  const {\n    onClose,\n    selectedTask,\n    open\n  } = props;\n  const {\n    setRefresh\n  } = useContext(DataContext);\n  const user = useContext(UserContext);\n  const taskStatusData = GetTaskStatusData(selectedTask.status);\n  const workTime = moment.duration(moment(selectedTask.endTime, \"HH:mm\").diff(moment(selectedTask.startTime, \"HH:mm\")));\n  const [editMode, enterEditMode] = useState(false);\n  const [titleState, setTitle] = useState(\"\");\n  const [descState, setDesc] = useState(\"\");\n  const [workTimeState, setWorkTime] = useState(\"\");\n  const [selectedDate, handleDateChange] = useState(new Date());\n  const [taskAddress, setAddress] = useState(\"\");\n\n  const handleClose = () => {\n    enterEditMode(false);\n    setTitle('');\n    setDesc('');\n    setWorkTime('');\n    onClose();\n  };\n\n  const editModeOn = () => {\n    enterEditMode(true);\n    setTitle(selectedTask.title);\n    setDesc(selectedTask.desc);\n    setAddress(selectedTask.address);\n    setWorkTime(selectedTask.workTime);\n\n    if (taskTitleId.current) {\n      taskTitleId.current.focus();\n    }\n  };\n\n  const editModeOff = () => {\n    enterEditMode(false);\n    setTitle('');\n    setDesc('');\n    setAddress('');\n    setWorkTime('');\n  };\n\n  const handleStatusChange = event => {\n    try {\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': '*/*',\n          'Authorization': 'Bearer ' + localStorage.getItem(\"@token\")\n        },\n        body: JSON.stringify({\n          token: user.uid,\n          collection: \"meeting_tasks\",\n          taskId: selectedTask.id,\n          status: event.target.value\n        })\n      };\n      fetch('https://europe-west1-plannerapp-960c1.cloudfunctions.net/app/api/update-task-status', requestOptions).then(response => response.json()).then(data => setRefresh(data.taskId));\n    } catch (error) {\n      console.log(error);\n      alert(\"Something went wrong. Please try again later.\");\n    }\n\n    selectedTask.status = event.target.value;\n  };\n\n  async function updateTask() {\n    try {\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': '*/*',\n          'Authorization': 'Bearer ' + localStorage.getItem(\"@token\")\n        },\n        body: JSON.stringify({\n          token: user.uid,\n          taskId: selectedTask.id,\n          title: selectedTask.title,\n          desc: selectedTask.desc,\n          date: moment(selectedDate).format(\"DD/MM/yyy\"),\n          status: selectedTask.status,\n          address: selectedTask.address,\n          startTime: selectedTask.startTime,\n          endTime: selectedTask.endTime,\n          category: \"\"\n        })\n      };\n      await fetch('https://europe-west1-plannerapp-960c1.cloudfunctions.net/app/api/update-meeting-task', requestOptions).then(response => response);\n    } catch (error) {\n      console.log(error);\n      alert(\"Something went wrong. Please try again later.\");\n    }\n\n    setRefresh(selectedTask.id);\n    editModeOff();\n  }\n\n  ;\n\n  async function deleteTask() {\n    try {\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': '*/*',\n          'Authorization': 'Bearer ' + localStorage.getItem(\"@token\")\n        },\n        body: JSON.stringify({\n          taskId: selectedTask.id,\n          token: user.uid\n        })\n      };\n      await fetch('https://europe-west1-plannerapp-960c1.cloudfunctions.net/app/api/delete-meeting-task', requestOptions).then(response => response);\n    } catch (error) {\n      console.log(error);\n      alert(\"Something went wrong. Please try again later.\");\n    }\n\n    setRefresh(selectedTask.id);\n    handleClose();\n  }\n\n  ;\n\n  const TaskDescription = () => {\n    if (!editMode) {\n      if (selectedTask.desc !== \"\") {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          className: \"task-detail-info\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(FormatAlignLeftIcon, {\n          style: {\n            paddingTop: '2px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"h3\", {\n          className: \"detail-text\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }\n        }, selectedTask.desc));\n      } else {\n        return \"\";\n      }\n    } else {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: \"task-detail-info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FormatAlignLeftIcon, {\n        style: {\n          paddingTop: '2px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(TextField, {\n        multiline: true,\n        style: {\n          width: \"70%\"\n        },\n        className: \"task-desc-input\",\n        value: descState,\n        onChange: e => setDesc(e.target.value),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }\n      }));\n    }\n  };\n\n  const TaskDatePicker = () => {\n    if (editMode) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'start',\n          padding: '10px 0px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TodayIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(DatePicker, {\n        autoOk: true,\n        disableToolbar: true,\n        variant: \"inline\",\n        inputVariant: \"outlined\",\n        style: {\n          width: 90,\n          marginLeft: 10,\n          background: 'rgba(171, 171, 171, 0.15)',\n          borderRadius: '5px',\n          border: 'none'\n        },\n        format: \"D.M.YYYY\",\n        value: selectedDate,\n        onChange: date => handleDateChange(date),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }\n      }));\n    } else {\n      return \"\";\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n    utils: MomentUtils,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    onClose: handleClose,\n    open: open,\n    fullWidth: true,\n    maxWidth: 'xs',\n    PaperProps: {\n      style: {\n        backgroundColor: '#FFEAC8',\n        color: 'black',\n        borderRadius: '30px',\n        padding: '35px',\n        boxShadow: '0px 0px 15px 0px rgba(0,0,0,0.15)',\n        transition: 'all 1s'\n      },\n      elevation: 0\n    },\n    BackdropProps: {\n      style: {\n        backgroundColor: \"rgba(0, 0, 0, 0.25)\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }, editMode ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    style: {\n      width: \"70%\"\n    },\n    variant: \"outlined\",\n    inputRef: taskTitleId,\n    className: \"task-title-input\",\n    value: titleState,\n    onChange: e => setTitle(e.target.value),\n    InputProps: {\n      disableUnderline: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"edit\",\n    className: \"edit-button\",\n    onClick: () => {\n      deleteTask();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(DeleteIcon, {\n    style: {\n      color: '#c45a5a'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 33\n    }\n  }))) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"detail-title\",\n    onClick: () => editModeOn(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 29\n    }\n  }, selectedTask.title), /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"edit\",\n    className: \"edit-button\",\n    onClick: () => {\n      editModeOn();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(CreateIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"close\",\n    className: \"close-button\",\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CloseIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'start',\n      padding: '10px 0px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FlagIcon, {\n    style: {\n      paddingTop: '2px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    disableUnderline: true,\n    classes: {\n      root: \"task-select\"\n    },\n    MenuProps: menuProps,\n    value: taskStatusData.id,\n    onChange: handleStatusChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"done\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 29\n    }\n  }, renderTaskStatusBubble(GetTaskStatusData('done'))), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"in_progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 29\n    }\n  }, renderTaskStatusBubble(GetTaskStatusData('in_progress'))), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"not_done\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 29\n    }\n  }, renderTaskStatusBubble(GetTaskStatusData('not_done')))))), /*#__PURE__*/React.createElement(TaskDescription, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 17\n    }\n  }), editMode ? \"\" //   <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'start', padding: '10px 0px' }}>\n  //         <PlaceIcon />\n  //         <GooglePlacesAutocomplete\n  //             selectProps={{\n  //                 styles: {\n  //                     control: (provider, state) => ({\n  //                         ...provider,\n  //                         background: 'none',\n  //                         fontFamily: 'Poppins',\n  //                         width: '97.8%',\n  //                         height: '3.8em',\n  //                         borderColor: 'rgba(0, 0, 0, 0.23)',\n  //                         \"&:hover\": {\n  //                             borderColor: state.isFocused ? \"-webkit-focus-ring-color\" : \"black\"\n  //                         }\n  //                     }),\n  //                     container: (provided) => ({\n  //                         ...provided,\n  //                         width: '100%',\n  //                         marginLeft: '10px',\n  //                     }),\n  //                     input: (provided) => ({\n  //                         ...provided,\n  //                         fontFamily: 'Poppins',\n  //                         color: '#2b2b2b',\n  //                     }),\n  //                     option: (provided) => ({\n  //                         ...provided,\n  //                         fontFamily: 'Poppins',\n  //                         color: '#2b2b2b',\n  //                     }),\n  //                     menu: (provided) => ({\n  //                         ...provided,\n  //                         width: '97.8%',\n  //                     }),\n  //                     singleValue: (provided) => ({\n  //                         ...provided,\n  //                         fontFamily: 'Poppins',\n  //                         color: '#2b2b2b',\n  //                     }),\n  //                     dropdownIndicator: (provider) => ({\n  //                         ...provider,\n  //                         color: 'rgba(0, 0, 0, 0.23)',\n  //                     }),\n  //                     indicatorSeparator: (provider) => ({\n  //                         ...provider,\n  //                         color: 'rgba(0, 0, 0, 0.23)',\n  //                     }),\n  //                 },\n  //                 taskAddress,\n  //                 onChange: setAddress(taskAddress),\n  //             }}\n  //         />\n  //     </span>\n  :\n  /*#__PURE__*/\n  React.createElement(\"span\", {\n    className: \"task-detail-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(PlaceIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"detail-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 25\n    }\n  }, selectedTask.address)), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"task-detail-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ScheduleIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"detail-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 21\n    }\n  }, selectedTask.startTime, \" - \", selectedTask.endTime)), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"task-detail-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TimerIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"detail-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 21\n    }\n  }, parseInt(workTime.asHours()), \"h\", parseInt(workTime.asMinutes()) % 60, \"m\")), /*#__PURE__*/React.createElement(TaskDatePicker, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 17\n    }\n  }), editMode ? /*#__PURE__*/React.createElement(Button, {\n    className: \"update-task-button\",\n    onClick: () => {\n      editModeOff();\n      updateTask();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 25\n    }\n  }, \"Aktualizova\\u0165\") : \"\"));\n}\nMeetDetailDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  selectedTask: PropTypes.object.isRequired\n};","map":{"version":3,"sources":["/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/dialogWindows/MeetDetailDialog.js"],"names":["React","useState","useContext","useRef","createRef","GetTaskStatusData","moment","MeetEditDialog","Button","PropTypes","Dialog","Select","MenuItem","FormControl","TextField","MuiPickersUtilsProvider","DatePicker","MomentUtils","GooglePlacesAutocomplete","FormatAlignLeftIcon","IconButton","CreateIcon","DeleteIcon","CloseIcon","FlagIcon","PlaceIcon","ScheduleIcon","TimerIcon","TodayIcon","DataContext","UserContext","renderTaskStatusBubble","menuProps","MeetDetailDialog","props","taskTitleId","onClose","selectedTask","open","setRefresh","user","taskStatusData","status","workTime","duration","endTime","diff","startTime","editMode","enterEditMode","titleState","setTitle","descState","setDesc","workTimeState","setWorkTime","selectedDate","handleDateChange","Date","taskAddress","setAddress","handleClose","editModeOn","title","desc","address","current","focus","editModeOff","handleStatusChange","event","requestOptions","method","headers","localStorage","getItem","body","JSON","stringify","token","uid","collection","taskId","id","target","value","fetch","then","response","json","data","error","console","log","alert","updateTask","date","format","category","deleteTask","TaskDescription","paddingTop","width","e","TaskDatePicker","display","alignItems","justifyContent","padding","marginLeft","background","borderRadius","border","style","backgroundColor","color","boxShadow","transition","elevation","disableUnderline","root","parseInt","asHours","asMinutes","propTypes","func","isRequired","bool","object"],"mappings":"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","sourcesContent":["import '../App.css';\nimport './css/dialog.sass';\nimport React, { useState, useContext, useRef, createRef } from 'react';\nimport { GetTaskStatusData } from '../taskBubble/TaskStatusData';\nimport moment from 'moment';\n\nimport { MeetEditDialog } from './editModeDialogs/MeetEditDialog';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport { MuiPickersUtilsProvider, DatePicker } from \"@material-ui/pickers\";\nimport MomentUtils from '@date-io/moment';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\n\nimport { \n    FormatAlignLeftIcon,\n    IconButton,\n    CreateIcon,\n    DeleteIcon,\n    CloseIcon,\n    FlagIcon,\n    PlaceIcon,\n    ScheduleIcon,\n    TimerIcon,\n    TodayIcon\n} from '../imports/icons';\n\nimport { DataContext } from \"../providers/DataProvider\";\nimport { UserContext } from \"../providers/UserProvider\";\nimport { renderTaskStatusBubble, menuProps } from '../const/dialogConsts';\n\nexport function MeetDetailDialog(props) {\n\n    let taskTitleId = useRef(null);\n\n    const { onClose, selectedTask, open } = props;\n    const { setRefresh } = useContext(DataContext);\n    const user = useContext(UserContext);\n    const taskStatusData = GetTaskStatusData(selectedTask.status);\n    const workTime = moment.duration(moment(selectedTask.endTime, \"HH:mm\").diff(moment(selectedTask.startTime, \"HH:mm\")));\n\n    const [editMode, enterEditMode] = useState(false);\n    const [titleState, setTitle] = useState(\"\");\n    const [descState, setDesc] = useState(\"\");\n    const [workTimeState, setWorkTime] = useState(\"\");\n    const [selectedDate, handleDateChange] = useState(new Date());\n    const [taskAddress, setAddress] = useState(\"\");\n\n    const handleClose = () => {\n        enterEditMode(false);\n        setTitle('');\n        setDesc('');\n        setWorkTime('');\n        onClose();\n    };\n\n    const editModeOn = () => {\n        enterEditMode(true);\n        setTitle(selectedTask.title);\n        setDesc(selectedTask.desc);\n        setAddress(selectedTask.address);\n        setWorkTime(selectedTask.workTime);\n        if (taskTitleId.current) {\n            taskTitleId.current.focus();\n        }\n        \n    }\n\n    const editModeOff = () => {\n        enterEditMode(false);\n        setTitle('');\n        setDesc('');\n        setAddress('');\n        setWorkTime('');\n    }\n\n    const handleStatusChange = (event) => {\n        try {\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json', 'Accept': '*/*', 'Authorization': 'Bearer ' + localStorage.getItem(\"@token\") },\n                body: JSON.stringify({ \n                    token: user.uid,\n                    collection: \"meeting_tasks\",\n                    taskId: selectedTask.id,\n                    status: event.target.value,\n                    })\n            };\n            fetch('https://europe-west1-plannerapp-960c1.cloudfunctions.net/app/api/update-task-status', requestOptions)\n                .then(response => response.json())\n                .then(data => setRefresh(data.taskId));\n        } catch(error) {\n            console.log(error);\n            alert(\"Something went wrong. Please try again later.\")\n        }\n        selectedTask.status = event.target.value;\n    }\n\n    async function updateTask() {\n        try {\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json', 'Accept': '*/*', 'Authorization': 'Bearer ' + localStorage.getItem(\"@token\") },\n                body: JSON.stringify({ \n                    token: user.uid,\n                    taskId: selectedTask.id,\n                    title: selectedTask.title,\n                    desc: selectedTask.desc,\n                    date: moment(selectedDate).format(\"DD/MM/yyy\"),\n                    status: selectedTask.status,\n                    address: selectedTask.address,\n                    startTime: selectedTask.startTime,\n                    endTime: selectedTask.endTime,\n                    category: \"\",\n                })\n            };\n            await fetch('https://europe-west1-plannerapp-960c1.cloudfunctions.net/app/api/update-meeting-task', requestOptions)\n            .then(response => response);\n        } catch(error) {\n            console.log(error);\n            alert(\"Something went wrong. Please try again later.\")\n        }\n\n        setRefresh(selectedTask.id);\n        editModeOff();\n    };\n\n    async function deleteTask() {\n        try {\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json', 'Accept': '*/*', 'Authorization': 'Bearer ' + localStorage.getItem(\"@token\") },\n                body: JSON.stringify({ taskId: selectedTask.id, token: user.uid })\n            };\n            await fetch('https://europe-west1-plannerapp-960c1.cloudfunctions.net/app/api/delete-meeting-task', requestOptions)\n            .then(response => response);\n        } catch(error) {\n            console.log(error);\n            alert(\"Something went wrong. Please try again later.\")\n        }\n\n        setRefresh(selectedTask.id);\n        handleClose();\n    };\n\n    const TaskDescription = () => {\n        if (!editMode) {\n            if (selectedTask.desc !== \"\") {\n                return (\n                    <span className=\"task-detail-info\">\n                        <FormatAlignLeftIcon style={{ paddingTop: '2px' }} />\n                        <h3 className=\"detail-text\">\n                            {selectedTask.desc}\n                        </h3>\n                    </span>\n                );\n            } else {\n                return (\"\")\n            }\n        } else {\n            return (\n                <span className=\"task-detail-info\">\n                    <FormatAlignLeftIcon style={{ paddingTop: '2px' }} />\n                    <TextField multiline style={{width: \"70%\"}} className=\"task-desc-input\" value={descState} onChange={e => setDesc(e.target.value)}/>\n                </span>\n            );\n        }\n    }\n\n    const TaskDatePicker = () => {\n        if (editMode) {\n            return (\n                <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'start', padding: '10px 0px' }}>\n                    <TodayIcon />\n                    <DatePicker\n                        autoOk\n                        disableToolbar\n                        variant=\"inline\"\n                        inputVariant=\"outlined\"\n                        style={{ width: 90, marginLeft: 10, background: 'rgba(171, 171, 171, 0.15)', borderRadius: '5px', border: 'none' }}\n                        format=\"D.M.YYYY\"\n                        value={selectedDate}\n                        onChange={date => handleDateChange(date)}\n                    />\n                </span>\n            );\n        } else {\n            return(\"\")\n        }\n    }\n\n    \n    return (\n        <MuiPickersUtilsProvider utils={MomentUtils}>\n            <Dialog\n                onClose={handleClose}\n                open={open}\n                fullWidth={true}\n                maxWidth={'xs'}\n                PaperProps={{ style: { backgroundColor: '#FFEAC8', color: 'black', borderRadius: '30px', padding: '35px', boxShadow: '0px 0px 15px 0px rgba(0,0,0,0.15)', transition: 'all 1s'}, elevation: 0 }}\n                BackdropProps={{ style: { backgroundColor: \"rgba(0, 0, 0, 0.25)\" } }}\n            >\n                { editMode\n                    ?   <div>\n                            <TextField style={{width: \"70%\"}} variant=\"outlined\" inputRef={taskTitleId} className=\"task-title-input\" value={titleState} onChange={e => setTitle(e.target.value)} InputProps={{ disableUnderline: true }} />\n                            <IconButton aria-label=\"edit\" className=\"edit-button\" onClick={() => {deleteTask()}}>\n                                <DeleteIcon style={{color: '#c45a5a'}}/>\n                            </IconButton> \n                        </div> \n                    \n                    :   <div>\n                            <h1 className=\"detail-title\" onClick={() => editModeOn()}>{selectedTask.title}</h1>\n                            <IconButton aria-label=\"edit\" className=\"edit-button\" onClick={() => {editModeOn()}}>\n                                <CreateIcon />\n                            </IconButton>\n                        </div>\n                }\n\n                <IconButton aria-label=\"close\" className=\"close-button\" onClick={handleClose}>\n                    <CloseIcon />\n                </IconButton>\n\n                <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'start', padding: '10px 0px' }}>\n                    <FlagIcon style={{ paddingTop: '2px' }} />\n                    <FormControl>\n                        <Select\n                            disableUnderline\n                            classes={{ root: \"task-select\" }}\n                            MenuProps={menuProps}\n                            value={taskStatusData.id}\n                            onChange={handleStatusChange}\n                        >\n                            <MenuItem value={\"done\"}>{renderTaskStatusBubble(GetTaskStatusData('done'))}</MenuItem>\n                            <MenuItem value={\"in_progress\"}>{renderTaskStatusBubble(GetTaskStatusData('in_progress'))}</MenuItem>\n                            <MenuItem value={\"not_done\"}>{renderTaskStatusBubble(GetTaskStatusData('not_done'))}</MenuItem>\n                        </Select>\n                    </FormControl>\n                </span>\n\n                <TaskDescription />\n\n                { editMode \n                  ? \"\"\n                //   <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'start', padding: '10px 0px' }}>\n                //         <PlaceIcon />\n                //         <GooglePlacesAutocomplete\n                //             selectProps={{\n                //                 styles: {\n                //                     control: (provider, state) => ({\n                //                         ...provider,\n                //                         background: 'none',\n                //                         fontFamily: 'Poppins',\n                //                         width: '97.8%',\n                //                         height: '3.8em',\n                //                         borderColor: 'rgba(0, 0, 0, 0.23)',\n                //                         \"&:hover\": {\n                //                             borderColor: state.isFocused ? \"-webkit-focus-ring-color\" : \"black\"\n                //                         }\n                //                     }),\n                //                     container: (provided) => ({\n                //                         ...provided,\n                //                         width: '100%',\n                //                         marginLeft: '10px',\n                //                     }),\n                //                     input: (provided) => ({\n                //                         ...provided,\n                //                         fontFamily: 'Poppins',\n                //                         color: '#2b2b2b',\n                //                     }),\n                //                     option: (provided) => ({\n                //                         ...provided,\n                //                         fontFamily: 'Poppins',\n                //                         color: '#2b2b2b',\n                //                     }),\n                //                     menu: (provided) => ({\n                //                         ...provided,\n                //                         width: '97.8%',\n                //                     }),\n                //                     singleValue: (provided) => ({\n                //                         ...provided,\n                //                         fontFamily: 'Poppins',\n                //                         color: '#2b2b2b',\n                //                     }),\n                //                     dropdownIndicator: (provider) => ({\n                //                         ...provider,\n                //                         color: 'rgba(0, 0, 0, 0.23)',\n                //                     }),\n                //                     indicatorSeparator: (provider) => ({\n                //                         ...provider,\n                //                         color: 'rgba(0, 0, 0, 0.23)',\n                //                     }),\n                //                 },\n                //                 taskAddress,\n                //                 onChange: setAddress(taskAddress),\n                //             }}\n                //         />\n                //     </span>\n                  : <span className=\"task-detail-info\">\n                        <PlaceIcon />\n                        <h3 className=\"detail-text\">\n                            {selectedTask.address}\n                        </h3>\n                    </span>\n                }\n\n                <span className=\"task-detail-info\">\n                    <ScheduleIcon />\n                    <h3 className=\"detail-text\">\n                        {selectedTask.startTime} - {selectedTask.endTime}\n                    </h3>\n                </span>\n\n                <span className=\"task-detail-info\">\n                    <TimerIcon />\n                    <h3 className=\"detail-text\">\n                        {parseInt(workTime.asHours())}h{parseInt(workTime.asMinutes())%60}m\n                    </h3>\n                </span>\n\n                <TaskDatePicker />\n\n                {editMode \n                    ?   <Button className=\"update-task-button\" onClick={() => {editModeOff();updateTask()}}>\n                            Aktualizovať\n                        </Button>\n                    : \"\"\n                }\n\n            </Dialog>\n        </MuiPickersUtilsProvider>\n    );\n}\n\nMeetDetailDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    selectedTask: PropTypes.object.isRequired\n};"]},"metadata":{},"sourceType":"module"}