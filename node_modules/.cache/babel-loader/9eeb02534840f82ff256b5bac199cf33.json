{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vlkalex\\\\Documents\\\\Projects\\\\ConsultApp\\\\src\\\\DateCalc.js\";\nimport React from 'react';\nimport moment from 'moment';\n\nlet enumerateDaysBetweenDates = function (startDate, endDate) {\n  var dates = [];\n\n  if (moment(\"1\", \"MM\").startOf('month').format('d') > 0) {\n    var currDate = moment(startDate).subtract(moment(\"1\", \"MM\").startOf('month').format('d'), 'days').startOf('day');\n    currDate.add('1', 'day');\n  } else {\n    var currDate = moment(startDate).startOf('day');\n  }\n\n  var lastDate = moment(endDate).startOf('day');\n\n  while (currDate.add(1, 'days').diff(lastDate) < 0) {\n    dates.push( /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 20\n      }\n    }, currDate.format('D'), \". \", currDate.format(\"dddd\")));\n  }\n\n  return dates;\n};\n\nexport let getDatesFromMonth = function (currentMonth) {\n  let startBlanks = [];\n  let endBlanks = [];\n  let daysInMonth = [];\n  let weeks = [];\n\n  for (let day = 1; day <= moment(currentMonth, \"MM\").daysInMonth(); day++) {\n    if (day == moment().date()) {\n      daysInMonth.push( /*#__PURE__*/React.createElement(\"h3\", {\n        style: {\n          backgroundColor: 'blue'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 30\n        }\n      }, day, \". \", moment(currentMonth, \"MM\").date(day).format(\"dddd\")));\n    } else {\n      daysInMonth.push( /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 30\n        }\n      }, day, \". \", moment(currentMonth, \"MM\").date(day).format(\"dddd\")));\n    }\n  }\n\n  for (let i = moment(currentMonth, \"MM\").endOf('month').format('d'); i < 7; i++) {\n    if (i == 0) {\n      break;\n    }\n\n    endBlanks.push( /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 20\n      }\n    }, \"Skip!\"));\n  }\n\n  startBlanks = enumerateDaysBetweenDates(moment(currentMonth, \"MM\").subtract(1, 'months').endOf('month').format('M/D/YYYY'), moment(currentMonth, \"MM\").startOf('month').format('M/D/YYYY'));\n  let totalSlots = [...startBlanks, ...daysInMonth, ...endBlanks];\n  let temp = [];\n  totalSlots.forEach((item, i) => {\n    if (i > 1) {\n      if (i % 7 == 0) {\n        weeks.push(temp);\n        temp = [];\n      }\n    }\n\n    temp.push(item);\n  });\n  weeks.push(temp);\n  return weeks;\n};","map":{"version":3,"sources":["C:/Users/vlkalex/Documents/Projects/ConsultApp/src/DateCalc.js"],"names":["React","moment","enumerateDaysBetweenDates","startDate","endDate","dates","startOf","format","currDate","subtract","add","lastDate","diff","push","getDatesFromMonth","currentMonth","startBlanks","endBlanks","daysInMonth","weeks","day","date","backgroundColor","i","endOf","totalSlots","temp","forEach","item"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport moment from 'moment';\r\n\r\nlet enumerateDaysBetweenDates = function(startDate, endDate) {\r\n    var dates = [];\r\n  \r\n    if (moment(\"1\",\"MM\").startOf('month').format('d') > 0) {\r\n        var currDate = moment(startDate).subtract(moment(\"1\",\"MM\").startOf('month').format('d'), 'days').startOf('day');\r\n        currDate.add('1', 'day');\r\n    } else {\r\n        var currDate = moment(startDate).startOf('day');\r\n    }\r\n    \r\n    var lastDate = moment(endDate).startOf('day');\r\n  \r\n    while(currDate.add(1, 'days').diff(lastDate) < 0) {\r\n        dates.push(<h3>{currDate.format('D')}. {currDate.format(\"dddd\")}</h3>);\r\n    }\r\n    \r\n    return dates;\r\n};\r\n\r\nexport let getDatesFromMonth = function(currentMonth) {\r\n    let startBlanks = [];\r\n    let endBlanks = [];\r\n    let daysInMonth = [];\r\n    let weeks = [];\r\n\r\n    for (let day = 1; day <= moment(currentMonth,\"MM\").daysInMonth(); day++) {\r\n        if (day == moment().date()){\r\n            daysInMonth.push(<h3 style={{backgroundColor:'blue'}}>{day}. {moment(currentMonth,\"MM\").date(day).format(\"dddd\")}</h3>)\r\n        } else {\r\n            daysInMonth.push(<h3>{day}. {moment(currentMonth,\"MM\").date(day).format(\"dddd\")}</h3>)\r\n        }\r\n    }\r\n    for (let i = moment(currentMonth,\"MM\").endOf('month').format('d'); i < 7; i++) {\r\n    if (i == 0) {\r\n        break;\r\n    }\r\n    endBlanks.push(<p>Skip!</p>);\r\n    }\r\n\r\n    startBlanks = enumerateDaysBetweenDates(moment(currentMonth,\"MM\").subtract(1,'months').endOf('month').format('M/D/YYYY'),moment(currentMonth,\"MM\").startOf('month').format('M/D/YYYY'))\r\n\r\n    let totalSlots = [...startBlanks, ...daysInMonth, ...endBlanks];\r\n\r\n    let temp = [];\r\n    totalSlots.forEach((item, i) => {\r\n    if (i > 1) {\r\n        if(i%7 == 0) {\r\n        weeks.push(temp);\r\n        temp = [];\r\n        }\r\n    }\r\n    temp.push(item);\r\n    });\r\n\r\n    weeks.push(temp);\r\n\r\n    return weeks;\r\n}"]},"metadata":{},"sourceType":"module"}