{"ast":null,"code":"var _jsxFileName = \"/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/components/Task/AddTask/AddWorkTask.tsx\";\nimport MomentUtils from '@date-io/moment';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport IconButton from '@material-ui/core/IconButton';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport CloseIcon from '@material-ui/icons/Close';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport TodayIcon from '@material-ui/icons/Today';\nimport { Alert } from '@material-ui/lab';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport gql from 'graphql-tag';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport '../../../App.css';\nimport { Status, useAddWorkTaskMutation } from '../../../generated/graphql';\nimport { AuthContext } from '../../../providers/UserProvider';\nimport { timeSlots } from '../helpers';\nconst CssTextField = withStyles({\n  root: {\n    '& .MuiFilledInput-root': {\n      fontFamily: 'Poppins',\n      paddingTop: 0,\n      background: 'rgba(171, 171, 171, 0.15)'\n    }\n  }\n})(TextField);\nexport function AddWorkTask({\n  onClose,\n  open\n}) {\n  const {\n    currentUser: user\n  } = useContext(AuthContext);\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  const [error, setError] = useState('');\n  const [formState, setFormState] = useState({\n    id: uuidv4(),\n    userId: user.uid,\n    date: new Date().toISOString(),\n    description: '',\n    title: '',\n    pending: false,\n    status: Status.NotDone,\n    workTime: '0h30m'\n  });\n  useEffect(() => {\n    if (user.uid !== formState.userId) setFormState({ ...formState,\n      userId: user.uid\n    });\n    return;\n  }, [setFormState, formState, user.uid]);\n  const [addWorkTask] = useAddWorkTaskMutation();\n\n  const handleForm = e => {\n    e.preventDefault();\n    if (formState.title === '') return setError('Title must be filled in!');\n    if (formState.description === '') return setError('Description must be filled in!');\n    const epoch = new Date().getTime();\n    addWorkTask({\n      variables: { ...formState,\n        index: parseInt(`1100${epoch}`)\n      },\n      optimisticResponse: {\n        createTask: {\n          __typename: 'WorkTask',\n          index: parseInt(`1100${epoch}`),\n          date: formState.date,\n          description: formState.description,\n          id: formState.id,\n          pending: formState.pending,\n          status: formState.status,\n          title: formState.title,\n          user: {\n            id: formState.userId\n          },\n          workTime: formState.workTime\n        }\n      },\n      update: (store, {\n        data\n      }) => {\n        try {\n          if (data == null) return;\n          store.modify({\n            id: 'ROOT_QUERY',\n            fields: {\n              workTaskMany(existingWorkTasksRef, {\n                readField\n              }) {\n                const newTaskRef = store.writeFragment({\n                  data: data.createTask,\n                  fragment: gql`\n                    fragment NewWorkTask on WorkTask {\n                      id\n                      user {\n                        id\n                      }\n                      date\n                      description\n                      title\n                      status\n                      pending\n                      workTime\n                    }\n                  `\n                });\n                return {\n                  items: [...existingWorkTasksRef.items, newTaskRef]\n                };\n              }\n\n            }\n          });\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    });\n    setFormState({\n      id: uuidv4(),\n      userId: '1a5s89dwd5as654nmji6d',\n      date: new Date().toISOString(),\n      description: '',\n      title: '',\n      pending: false,\n      status: Status.NotDone,\n      workTime: '0h30m'\n    });\n    handleClose();\n  };\n\n  return /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n    utils: MomentUtils,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    onClose: handleClose,\n    open: open,\n    fullWidth: true,\n    maxWidth: 'xs',\n    PaperProps: {\n      style: {\n        backgroundColor: '#fff',\n        color: 'black',\n        borderRadius: '30px',\n        padding: '35px',\n        boxShadow: '0px 0px 15px 0px rgba(0,0,0,0.15)'\n      },\n      elevation: 0\n    },\n    BackdropProps: {\n      style: {\n        backgroundColor: 'rgba(0, 0, 0, 0.25)'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => handleForm(e),\n    style: {\n      display: 'contents'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"detail-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, \"Vytvori\\u0165 \\xFAlohu\"), /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"close\",\n    className: \"close-button\",\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CloseIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(TextField, {\n    label: \"N\\xE1zov\",\n    variant: \"outlined\",\n    value: formState.title,\n    onChange: e => setFormState({ ...formState,\n      title: e.target.value\n    }),\n    className: \"add-task-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Popis\",\n    multiline: true,\n    rows: 3,\n    variant: \"outlined\",\n    value: formState.description,\n    onChange: e => setFormState({ ...formState,\n      description: e.target.value\n    }),\n    className: \"add-task-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      alignItems: 'center',\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      marginLeft: '30px',\n      marginRight: '30px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'start',\n      padding: '10px 0px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TodayIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(DatePicker, {\n    autoOk: true,\n    disableToolbar: true,\n    variant: \"inline\",\n    inputVariant: \"outlined\",\n    style: {\n      width: 90,\n      marginLeft: 15,\n      background: 'rgba(171, 171, 171, 0.15)',\n      borderRadius: '5px',\n      border: 'none'\n    },\n    format: \"D.M.YYYY\",\n    value: moment(formState.date).format('YYYY-MM-DD'),\n    onChange: date => {\n      var _date$toDate$toISOStr;\n\n      return setFormState({ ...formState,\n        date: (_date$toDate$toISOStr = date === null || date === void 0 ? void 0 : date.toDate().toISOString()) !== null && _date$toDate$toISOStr !== void 0 ? _date$toDate$toISOStr : ''\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'start',\n      padding: '10px 0px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TimerIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Autocomplete, {\n    id: \"time-picker\",\n    options: timeSlots,\n    style: {\n      width: 90,\n      marginLeft: 15\n    },\n    disableClearable: true,\n    freeSolo: true,\n    value: formState.workTime,\n    inputValue: formState.workTime,\n    onInputChange: (event, newInputValue) => {\n      setFormState({ ...formState,\n        workTime: newInputValue\n      });\n    },\n    renderInput: params => /*#__PURE__*/React.createElement(CssTextField, Object.assign({}, params, {\n      variant: \"outlined\",\n      style: {\n        background: 'rgba(171, 171, 171, 0.15)',\n        borderRadius: '5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 19\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    className: \"create-task-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 11\n    }\n  }, \"Vytvori\\u0165\")), error === '' ? '' : /*#__PURE__*/React.createElement(Alert, {\n    severity: \"error\",\n    onClose: () => setError(''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 11\n    }\n  }, error)));\n}\nAddWorkTask.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired\n};","map":{"version":3,"sources":["/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/components/Task/AddTask/AddWorkTask.tsx"],"names":["MomentUtils","Button","Dialog","IconButton","withStyles","TextField","CloseIcon","TimerIcon","TodayIcon","Alert","Autocomplete","DatePicker","MuiPickersUtilsProvider","gql","moment","PropTypes","React","useContext","useEffect","useState","v4","uuidv4","Status","useAddWorkTaskMutation","AuthContext","timeSlots","CssTextField","root","fontFamily","paddingTop","background","AddWorkTask","onClose","open","currentUser","user","handleClose","error","setError","formState","setFormState","id","userId","uid","date","Date","toISOString","description","title","pending","status","NotDone","workTime","addWorkTask","handleForm","e","preventDefault","epoch","getTime","variables","index","parseInt","optimisticResponse","createTask","__typename","update","store","data","modify","fields","workTaskMany","existingWorkTasksRef","readField","newTaskRef","writeFragment","fragment","items","console","style","backgroundColor","color","borderRadius","padding","boxShadow","elevation","display","target","value","alignItems","flexDirection","justifyContent","marginLeft","marginRight","width","border","format","toDate","event","newInputValue","params","propTypes","func","isRequired","bool"],"mappings":"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","sourcesContent":["import MomentUtils from '@date-io/moment';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport IconButton from '@material-ui/core/IconButton';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport CloseIcon from '@material-ui/icons/Close';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport TodayIcon from '@material-ui/icons/Today';\nimport { Alert } from '@material-ui/lab';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport gql from 'graphql-tag';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport '../../../App.css';\nimport { Status, useAddWorkTaskMutation } from '../../../generated/graphql';\nimport { AuthContext } from '../../../providers/UserProvider';\nimport { timeSlots } from '../helpers';\n\nconst CssTextField = withStyles({\n  root: {\n    '& .MuiFilledInput-root': {\n      fontFamily: 'Poppins',\n      paddingTop: 0,\n      background: 'rgba(171, 171, 171, 0.15)'\n    }\n  }\n})(TextField);\n\ninterface InputProps {\n  onClose: () => void;\n  open: boolean;\n}\nexport function AddWorkTask({ onClose, open }: InputProps) {\n  const { currentUser: user } = useContext(AuthContext);\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  const [error, setError] = useState('');\n\n  const [formState, setFormState] = useState({\n    id: uuidv4(),\n    userId: user.uid,\n    date: new Date().toISOString(),\n    description: '',\n    title: '',\n    pending: false,\n    status: Status.NotDone,\n    workTime: '0h30m'\n  });\n\n  useEffect(() => {\n    if (user.uid !== formState.userId)\n      setFormState({ ...formState, userId: user.uid });\n\n    return;\n  }, [setFormState, formState, user.uid]);\n\n  const [addWorkTask] = useAddWorkTaskMutation();\n\n  const handleForm = (e) => {\n    e.preventDefault();\n\n    if (formState.title === '') return setError('Title must be filled in!');\n    if (formState.description === '')\n      return setError('Description must be filled in!');\n\n    const epoch = new Date().getTime();\n\n    addWorkTask({\n      variables: {\n        ...formState,\n        index: parseInt(`1100${epoch}`)\n      },\n      optimisticResponse: {\n        createTask: {\n          __typename: 'WorkTask',\n          index: parseInt(`1100${epoch}`),\n          date: formState.date,\n          description: formState.description,\n          id: formState.id,\n          pending: formState.pending,\n          status: formState.status,\n          title: formState.title,\n          user: {\n            id: formState.userId\n          },\n          workTime: formState.workTime\n        }\n      },\n      update: (store, { data }) => {\n        try {\n          if (data == null) return;\n\n          store.modify({\n            id: 'ROOT_QUERY',\n            fields: {\n              workTaskMany(existingWorkTasksRef, { readField }) {\n                const newTaskRef = store.writeFragment({\n                  data: data.createTask,\n                  fragment: gql`\n                    fragment NewWorkTask on WorkTask {\n                      id\n                      user {\n                        id\n                      }\n                      date\n                      description\n                      title\n                      status\n                      pending\n                      workTime\n                    }\n                  `\n                });\n\n                return { items: [...existingWorkTasksRef.items, newTaskRef] };\n              }\n            }\n          });\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    });\n\n    setFormState({\n      id: uuidv4(),\n      userId: '1a5s89dwd5as654nmji6d',\n      date: new Date().toISOString(),\n      description: '',\n      title: '',\n      pending: false,\n      status: Status.NotDone,\n      workTime: '0h30m'\n    });\n\n    handleClose();\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <Dialog\n        onClose={handleClose}\n        open={open}\n        fullWidth={true}\n        maxWidth={'xs'}\n        PaperProps={{\n          style: {\n            backgroundColor: '#fff',\n            color: 'black',\n            borderRadius: '30px',\n            padding: '35px',\n            boxShadow: '0px 0px 15px 0px rgba(0,0,0,0.15)'\n          },\n          elevation: 0\n        }}\n        BackdropProps={{ style: { backgroundColor: 'rgba(0, 0, 0, 0.25)' } }}\n      >\n        <form onSubmit={(e) => handleForm(e)} style={{ display: 'contents' }}>\n          <h1 className=\"detail-title\">Vytvoriť úlohu</h1>\n          <IconButton\n            aria-label=\"close\"\n            className=\"close-button\"\n            onClick={onClose}\n          >\n            <CloseIcon />\n          </IconButton>\n\n          <TextField\n            label=\"Názov\"\n            variant=\"outlined\"\n            value={formState.title}\n            onChange={(e) =>\n              setFormState({ ...formState, title: e.target.value })\n            }\n            className=\"add-task-input\"\n          />\n\n          <TextField\n            label=\"Popis\"\n            multiline\n            rows={3}\n            variant=\"outlined\"\n            value={formState.description}\n            onChange={(e) =>\n              setFormState({ ...formState, description: e.target.value })\n            }\n            className=\"add-task-input\"\n          />\n\n          <div\n            style={{\n              alignItems: 'center',\n              display: 'flex',\n              flexDirection: 'row',\n              justifyContent: 'space-between',\n              marginLeft: '30px',\n              marginRight: '30px'\n            }}\n          >\n            <span\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'start',\n                padding: '10px 0px'\n              }}\n            >\n              <TodayIcon />\n              <DatePicker\n                autoOk\n                disableToolbar\n                variant=\"inline\"\n                inputVariant=\"outlined\"\n                style={{\n                  width: 90,\n                  marginLeft: 15,\n                  background: 'rgba(171, 171, 171, 0.15)',\n                  borderRadius: '5px',\n                  border: 'none'\n                }}\n                format=\"D.M.YYYY\"\n                value={moment(formState.date).format('YYYY-MM-DD')}\n                onChange={(date) =>\n                  setFormState({\n                    ...formState,\n                    date: date?.toDate().toISOString() ?? ''\n                  })\n                }\n              />\n            </span>\n\n            <span\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'start',\n                padding: '10px 0px'\n              }}\n            >\n              <TimerIcon />\n              <Autocomplete\n                id=\"time-picker\"\n                options={timeSlots}\n                style={{ width: 90, marginLeft: 15 }}\n                disableClearable\n                freeSolo\n                value={formState.workTime}\n                inputValue={formState.workTime}\n                onInputChange={(event, newInputValue) => {\n                  setFormState({ ...formState, workTime: newInputValue });\n                }}\n                renderInput={(params) => (\n                  <CssTextField\n                    {...params}\n                    variant=\"outlined\"\n                    style={{\n                      background: 'rgba(171, 171, 171, 0.15)',\n                      borderRadius: '5px'\n                    }}\n                  />\n                )}\n              />\n            </span>\n          </div>\n\n          <Button type=\"submit\" className=\"create-task-button\">\n            Vytvoriť\n          </Button>\n        </form>\n        {error === '' ? (\n          ''\n        ) : (\n          <Alert severity=\"error\" onClose={() => setError('')}>\n            {error}\n          </Alert>\n        )}\n      </Dialog>\n    </MuiPickersUtilsProvider>\n  );\n}\n\nAddWorkTask.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired\n};\n"]},"metadata":{},"sourceType":"module"}