{"ast":null,"code":"var _jsxFileName = \"/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/DateCalc.js\";\nimport React from 'react';\nimport moment from 'moment';\nexport let getDatesFromMonth = function (currentMonth) {\n  let startBlanks = [];\n  let endBlanks = [];\n  let daysInMonth = [];\n  let weeks = [];\n  let currentYear = moment().year();\n  let currentDay = moment().format('DD/MM/YYYY');\n  let currentWeek = moment(currentDay, 'DD/MM/YYYY').week();\n\n  for (let day = 1; day <= moment(currentMonth, \"MM\").daysInMonth(); day++) {\n    daysInMonth.push(moment(currentMonth, \"MM\").date(day).valueOf());\n  }\n\n  for (let i = moment(currentMonth, \"MM\").endOf('month').format('d'); i < 7; i++) {\n    if (i === 0) {\n      break;\n    }\n\n    endBlanks.push( /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 24\n      }\n    }, \"Skip!\"));\n  }\n\n  if (moment(currentMonth, \"MM\").startOf('month').format('d') !== '1') {\n    startBlanks = enumerateDaysBetweenDates(moment(currentMonth, \"MM\").subtract(1, 'months').endOf('month').format('M/D/YYYY'), moment(currentMonth, \"MM\").startOf('month').format('M/D/YYYY'));\n  }\n\n  let totalSlots = [...startBlanks, ...daysInMonth, ...endBlanks];\n  let temp = [];\n  totalSlots.forEach((item, i) => {\n    if (i > 1) {\n      if (i % 7 === 0) {\n        weeks.push(temp);\n        temp = [];\n      }\n    }\n\n    temp.push(item);\n  });\n  weeks.push(temp);\n  return weeks;\n};","map":{"version":3,"sources":["/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/DateCalc.js"],"names":["React","moment","getDatesFromMonth","currentMonth","startBlanks","endBlanks","daysInMonth","weeks","currentYear","year","currentDay","format","currentWeek","week","day","push","date","valueOf","i","endOf","startOf","enumerateDaysBetweenDates","subtract","totalSlots","temp","forEach","item"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAIA,OAAO,IAAIC,iBAAiB,GAAG,UAASC,YAAT,EAAuB;AAClD,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,WAAW,GAAGP,MAAM,GAAGQ,IAAT,EAAlB;AACA,MAAIC,UAAU,GAAGT,MAAM,GAAGU,MAAT,CAAgB,YAAhB,CAAjB;AACA,MAAIC,WAAW,GAAGX,MAAM,CAACS,UAAD,EAAY,YAAZ,CAAN,CAAgCG,IAAhC,EAAlB;;AAEA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,IAAIb,MAAM,CAACE,YAAD,EAAc,IAAd,CAAN,CAA0BG,WAA1B,EAAzB,EAAkEQ,GAAG,EAArE,EAAyE;AACrER,IAAAA,WAAW,CAACS,IAAZ,CAAiBd,MAAM,CAACE,YAAD,EAAc,IAAd,CAAN,CAA0Ba,IAA1B,CAA+BF,GAA/B,EAAoCG,OAApC,EAAjB;AACH;;AACD,OAAK,IAAIC,CAAC,GAAGjB,MAAM,CAACE,YAAD,EAAc,IAAd,CAAN,CAA0BgB,KAA1B,CAAgC,OAAhC,EAAyCR,MAAzC,CAAgD,GAAhD,CAAb,EAAmEO,CAAC,GAAG,CAAvE,EAA0EA,CAAC,EAA3E,EAA+E;AAC3E,QAAIA,CAAC,KAAK,CAAV,EAAa;AACT;AACH;;AACDb,IAAAA,SAAS,CAACU,IAAV,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAf;AACH;;AAED,MAAId,MAAM,CAACE,YAAD,EAAc,IAAd,CAAN,CAA0BiB,OAA1B,CAAkC,OAAlC,EAA2CT,MAA3C,CAAkD,GAAlD,MAA2D,GAA/D,EAAoE;AAChEP,IAAAA,WAAW,GAAGiB,yBAAyB,CAACpB,MAAM,CAACE,YAAD,EAAc,IAAd,CAAN,CAA0BmB,QAA1B,CAAmC,CAAnC,EAAqC,QAArC,EAA+CH,KAA/C,CAAqD,OAArD,EAA8DR,MAA9D,CAAqE,UAArE,CAAD,EAAkFV,MAAM,CAACE,YAAD,EAAc,IAAd,CAAN,CAA0BiB,OAA1B,CAAkC,OAAlC,EAA2CT,MAA3C,CAAkD,UAAlD,CAAlF,CAAvC;AACH;;AAED,MAAIY,UAAU,GAAG,CAAC,GAAGnB,WAAJ,EAAiB,GAAGE,WAApB,EAAiC,GAAGD,SAApC,CAAjB;AAEA,MAAImB,IAAI,GAAG,EAAX;AACAD,EAAAA,UAAU,CAACE,OAAX,CAAmB,CAACC,IAAD,EAAOR,CAAP,KAAa;AAChC,QAAIA,CAAC,GAAG,CAAR,EAAW;AACP,UAAGA,CAAC,GAAC,CAAF,KAAQ,CAAX,EAAc;AACdX,QAAAA,KAAK,CAACQ,IAAN,CAAWS,IAAX;AACAA,QAAAA,IAAI,GAAG,EAAP;AACC;AACJ;;AACDA,IAAAA,IAAI,CAACT,IAAL,CAAUW,IAAV;AACC,GARD;AAUAnB,EAAAA,KAAK,CAACQ,IAAN,CAAWS,IAAX;AAEA,SAAOjB,KAAP;AACH,CAvCM","sourcesContent":["import React from 'react';\nimport moment from 'moment';\n\n\n\nexport let getDatesFromMonth = function(currentMonth) {\n    let startBlanks = [];\n    let endBlanks = [];\n    let daysInMonth = [];\n    let weeks = [];\n    let currentYear = moment().year();\n    let currentDay = moment().format('DD/MM/YYYY');\n    let currentWeek = moment(currentDay,'DD/MM/YYYY').week();\n    \n    for (let day = 1; day <= moment(currentMonth,\"MM\").daysInMonth(); day++) {\n        daysInMonth.push(moment(currentMonth,\"MM\").date(day).valueOf())\n    }\n    for (let i = moment(currentMonth,\"MM\").endOf('month').format('d'); i < 7; i++) {\n        if (i === 0) {\n            break;\n        }\n        endBlanks.push(<p>Skip!</p>);\n    }\n\n    if (moment(currentMonth,\"MM\").startOf('month').format('d') !== '1') {\n        startBlanks = enumerateDaysBetweenDates(moment(currentMonth,\"MM\").subtract(1,'months').endOf('month').format('M/D/YYYY'),moment(currentMonth,\"MM\").startOf('month').format('M/D/YYYY'))\n    }\n\n    let totalSlots = [...startBlanks, ...daysInMonth, ...endBlanks];\n\n    let temp = [];\n    totalSlots.forEach((item, i) => {\n    if (i > 1) {\n        if(i%7 === 0) {\n        weeks.push(temp);\n        temp = [];\n        }\n    }\n    temp.push(item);\n    });\n\n    weeks.push(temp);\n\n    return weeks;\n};"]},"metadata":{},"sourceType":"module"}