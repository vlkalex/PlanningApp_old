{"ast":null,"code":"var _jsxFileName = \"/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/taskBubble/CommTaskBubble.js\";\nimport { useStyles } from \"../App\";\nimport \"../App.css\";\nimport React, { useContext, useEffect } from \"react\";\nimport { GetTaskStatusData } from \"./TaskStatusData\";\nimport { CommDetailDialog } from \"../dialogWindows/CommDetailDialog\";\nimport Box from \"@material-ui/core/Box\";\nimport moment from \"moment\";\nimport \"moment/locale/sk\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport TimerIcon from \"@material-ui/icons/Timer\";\nimport { getTasksByDate } from '../functions';\nimport { DataContext } from \"../providers/DataProvider\";\nexport function CommTaskBubble(date) {\n  const classes = useStyles();\n  const {\n    taskData\n  } = useContext(DataContext);\n  let filteredData = [];\n  useEffect(() => {\n    filteredData = getTasksByDate(taskData, 'comm', date);\n  })[taskData];\n  const [open, setOpen] = React.useState(false);\n  const [selectedTask, setSelectedTask] = React.useState({\n    id: \"-1\",\n    title: \"Test\",\n    desc: \"Test\",\n    workTime: \"100h\",\n    status: \"not_done\",\n    contact: {\n      phoneNumber: \"\",\n      email: \"\"\n    }\n  });\n\n  const handleClickOpen = task => {\n    setSelectedTask(task);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  if (filteredData === undefined || filteredData.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        justifyContent: \"center\",\n        height: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Droppable, {\n      droppableId: moment(date).unix() + 'c',\n      type: \"COMM\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, provided => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, provided.droppableProps, {\n      ref: provided.innerRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        textAlign: \"center\",\n        paddingTop: \"18px\",\n        color: \"#bdbdbd\",\n        fontFamily: \"Poppins\",\n        fontSize: \"18px\",\n        fontWeight: \"500\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }\n    }, \"Pr\\xE1zdne\"), provided.placeholder)));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Droppable, {\n      droppableId: moment(date).unix() + 'c',\n      type: \"COMM\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, provided => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, provided.droppableProps, {\n      ref: provided.innerRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }), filteredData.map((item, index) => /*#__PURE__*/React.createElement(Draggable, {\n      key: item.id,\n      draggableId: item.id,\n      index: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }, provided => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      style: {\n        marginBottom: '1em',\n        ...provided.draggableProps.style\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Box, {\n      className: classes.taskBubble,\n      style: {\n        backgroundColor: GetTaskStatusData(item.status).color\n      },\n      onClick: () => handleClickOpen(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      flexGrow: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: classes.bubbleTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 27\n      }\n    }, item.title)), /*#__PURE__*/React.createElement(TimerIcon, {\n      style: {\n        marginRight: \"5px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      className: classes.bubbleWorkTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }\n    }, item.workTime))))), provided.placeholder)), /*#__PURE__*/React.createElement(CommDetailDialog, {\n      onClose: handleClose,\n      open: open,\n      selectedTask: selectedTask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }));\n  }\n}","map":{"version":3,"sources":["/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/taskBubble/CommTaskBubble.js"],"names":["useStyles","React","useContext","useEffect","GetTaskStatusData","CommDetailDialog","Box","moment","Droppable","Draggable","TimerIcon","getTasksByDate","DataContext","CommTaskBubble","date","classes","taskData","filteredData","open","setOpen","useState","selectedTask","setSelectedTask","id","title","desc","workTime","status","contact","phoneNumber","email","handleClickOpen","task","handleClose","undefined","length","justifyContent","height","unix","provided","droppableProps","innerRef","textAlign","paddingTop","color","fontFamily","fontSize","fontWeight","placeholder","map","item","index","draggableProps","dragHandleProps","marginBottom","style","taskBubble","backgroundColor","bubbleTitle","marginRight","bubbleWorkTime"],"mappings":"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","sourcesContent":["import { useStyles } from \"../App\";\nimport \"../App.css\";\nimport React, { useContext, useEffect } from \"react\";\nimport { GetTaskStatusData } from \"./TaskStatusData\";\nimport { CommDetailDialog } from \"../dialogWindows/CommDetailDialog\";\nimport Box from \"@material-ui/core/Box\";\nimport moment from \"moment\";\nimport \"moment/locale/sk\";\n\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport TimerIcon from \"@material-ui/icons/Timer\";\n\nimport { getTasksByDate } from '../functions';\n\nimport { DataContext } from \"../providers/DataProvider\";\n\n\nexport function CommTaskBubble(date) {\n  const classes = useStyles();\n\n  const { taskData } = useContext(DataContext);\n\n  let filteredData = [];\n\n  useEffect(() => {\n    filteredData = getTasksByDate(taskData, 'comm', date);\n  }) [taskData]\n  \n\n  const [open, setOpen] = React.useState(false);\n  const [selectedTask, setSelectedTask] = React.useState({\n    id: \"-1\",\n    title: \"Test\",\n    desc: \"Test\",\n    workTime: \"100h\",\n    status: \"not_done\",\n    contact: { phoneNumber: \"\", email: \"\" },\n  });\n\n  const handleClickOpen = (task) => {\n    setSelectedTask(task);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  if (filteredData === undefined || filteredData.length === 0) {\n    return (\n      <div style={{ justifyContent: \"center\", height: \"100%\" }}>\n        <Droppable droppableId={moment(date).unix() + 'c'} type=\"COMM\">\n          {(provided) => (\n            <div {...provided.droppableProps} ref={provided.innerRef}>\n              <h3\n                style={{\n                  textAlign: \"center\",\n                  paddingTop: \"18px\",\n                  color: \"#bdbdbd\",\n                  fontFamily: \"Poppins\",\n                  fontSize: \"18px\",\n                  fontWeight: \"500\",\n                }}\n              >\n                Prázdne\n              </h3>\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <Droppable droppableId={moment(date).unix() + 'c'} type=\"COMM\">\n          {(provided) => (\n            <div {...provided.droppableProps} ref={provided.innerRef}>\n              {filteredData.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={{\n                        marginBottom: '1em',\n                        ...provided.draggableProps.style\n                      }}\n                    >\n                      <Box\n                        className={classes.taskBubble}\n                        style={{\n                          backgroundColor: GetTaskStatusData(item.status).color,\n                        }}\n                        onClick={() => handleClickOpen(item)}\n                      >\n                        <Box flexGrow={1}>\n                          <h3 className={classes.bubbleTitle}>\n                            {item.title}\n                          </h3>\n                        </Box>\n                        <TimerIcon style={{ marginRight: \"5px\" }} />\n                        <h3 className={classes.bubbleWorkTime}>\n                          {item.workTime}\n                        </h3>\n                      </Box>\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n        <CommDetailDialog\n          onClose={handleClose}\n          open={open}\n          selectedTask={selectedTask}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}