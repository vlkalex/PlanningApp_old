{"ast":null,"code":"var _jsxFileName = \"/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/providers/DataProvider.js\";\nimport React, { useState, createContext, useEffect } from \"react\";\nimport * as firebase from \"firebase\";\nimport moment from \"moment\";\nimport { getISOWeekDates } from \"../DateCalc\";\nexport const DataContext = createContext({\n  weekState: null,\n  setWeek: null,\n  currWeek: [],\n  currMonth: null,\n  taskData: [],\n  setRefresh: null\n});\n\nfunction DataProvider(props) {\n  const [weekState, setWeek] = useState(moment().week());\n  const [taskData, setTaskData] = useState([]);\n  const [refresh, setRefresh] = useState(0);\n  let ISOWeekDates = getISOWeekDates(weekState);\n  let currWeek = ISOWeekDates[0];\n  let currMonth = ISOWeekDates[1];\n  let modWeek = [];\n  useEffect(() => {\n    ISOWeekDates = getISOWeekDates(weekState);\n    currWeek = ISOWeekDates[0];\n    currMonth = ISOWeekDates[1];\n\n    for (const i of currWeek) {\n      modWeek.push(moment(i).format(\"DD/MM/yyyy\"));\n    }\n\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"*/*\"\n      },\n      body: JSON.stringify({\n        date: modWeek\n      })\n    };\n    fetch(\"https://europe-west1-plannerapp-960c1.cloudfunctions.net/app/api/get-all-tasks\", requestOptions).then(response => response.json()).then(data => {\n      setTaskData(data);\n    });\n  }, [weekState, refresh]);\n  return /*#__PURE__*/React.createElement(DataContext.Provider, {\n    value: {\n      weekState: weekState,\n      setWeek: setWeek,\n      currWeek: currWeek,\n      currMonth: currMonth,\n      taskData: taskData,\n      setRefresh: setRefresh\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, props.children);\n}\n\nexport default DataProvider;","map":{"version":3,"sources":["/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/providers/DataProvider.js"],"names":["React","useState","createContext","useEffect","firebase","moment","getISOWeekDates","DataContext","weekState","setWeek","currWeek","currMonth","taskData","setRefresh","DataProvider","props","week","setTaskData","refresh","ISOWeekDates","modWeek","i","push","format","requestOptions","method","headers","Accept","body","JSON","stringify","date","fetch","then","response","json","data","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,SAASC,eAAT,QAAgC,aAAhC;AAEA,OAAO,MAAMC,WAAW,GAAGL,aAAa,CAAC;AAAEM,EAAAA,SAAS,EAAE,IAAb;AAAmBC,EAAAA,OAAO,EAAE,IAA5B;AAAkCC,EAAAA,QAAQ,EAAE,EAA5C;AAAgDC,EAAAA,SAAS,EAAE,IAA3D;AAAiEC,EAAAA,QAAQ,EAAE,EAA3E;AAA+EC,EAAAA,UAAU,EAAE;AAA3F,CAAD,CAAjC;;AAEP,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAM,CAACP,SAAD,EAAYC,OAAZ,IAAuBR,QAAQ,CAACI,MAAM,GAAGW,IAAT,EAAD,CAArC;AACA,QAAM,CAACJ,QAAD,EAAWK,WAAX,IAA0BhB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACiB,OAAD,EAAUL,UAAV,IAAwBZ,QAAQ,CAAC,CAAD,CAAtC;AAEA,MAAIkB,YAAY,GAAGb,eAAe,CAACE,SAAD,CAAlC;AACA,MAAIE,QAAQ,GAAGS,YAAY,CAAC,CAAD,CAA3B;AACA,MAAIR,SAAS,GAAGQ,YAAY,CAAC,CAAD,CAA5B;AAEA,MAAIC,OAAO,GAAG,EAAd;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AAEdgB,IAAAA,YAAY,GAAGb,eAAe,CAACE,SAAD,CAA9B;AACAE,IAAAA,QAAQ,GAAGS,YAAY,CAAC,CAAD,CAAvB;AACAR,IAAAA,SAAS,GAAGQ,YAAY,CAAC,CAAD,CAAxB;;AAEA,SAAK,MAAME,CAAX,IAAgBX,QAAhB,EAA0B;AACxBU,MAAAA,OAAO,CAACE,IAAR,CAAajB,MAAM,CAACgB,CAAD,CAAN,CAAUE,MAAV,CAAiB,YAAjB,CAAb;AACD;;AAED,UAAMC,cAAc,GAAG;AACrBC,MAAAA,MAAM,EAAE,MADa;AAErBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB,kBAAlB;AAAsCC,QAAAA,MAAM,EAAE;AAA9C,OAFY;AAGrBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,QAAAA,IAAI,EAAEX;AAAR,OAAf;AAHe,KAAvB;AAKAY,IAAAA,KAAK,CACH,gFADG,EAEHR,cAFG,CAAL,CAIGS,IAJH,CAISC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAJtB,EAKGF,IALH,CAKSG,IAAD,IAAU;AACdnB,MAAAA,WAAW,CAACmB,IAAD,CAAX;AACD,KAPH;AASD,GAxBQ,EAwBN,CAAC5B,SAAD,EAAYU,OAAZ,CAxBM,CAAT;AA0BA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEV,MAAAA,SAAS,EAAEA,SAAb;AAAwBC,MAAAA,OAAO,EAAEA,OAAjC;AAA0CC,MAAAA,QAAQ,EAAEA,QAApD;AAA8DC,MAAAA,SAAS,EAAEA,SAAzE;AAAoFC,MAAAA,QAAQ,EAAEA,QAA9F;AAAwGC,MAAAA,UAAU,EAAEA;AAApH,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,KAAK,CAACsB,QADT,CADF;AAKD;;AAED,eAAevB,YAAf","sourcesContent":["import React, { useState, createContext, useEffect } from \"react\";\nimport * as firebase from \"firebase\";\nimport moment from \"moment\";\n\nimport { getISOWeekDates } from \"../DateCalc\";\n\nexport const DataContext = createContext({ weekState: null, setWeek: null, currWeek: [], currMonth: null, taskData: [], setRefresh: null });\n\nfunction DataProvider(props) {\n  const [weekState, setWeek] = useState(moment().week());\n  const [taskData, setTaskData] = useState([]);\n  const [refresh, setRefresh] = useState(0);\n\n  let ISOWeekDates = getISOWeekDates(weekState);\n  let currWeek = ISOWeekDates[0];\n  let currMonth = ISOWeekDates[1];\n\n  let modWeek = [];\n\n  useEffect(() => {\n\n    ISOWeekDates = getISOWeekDates(weekState);\n    currWeek = ISOWeekDates[0];\n    currMonth = ISOWeekDates[1];\n\n    for (const i of currWeek) {\n      modWeek.push(moment(i).format(\"DD/MM/yyyy\"));\n    }\n\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\", Accept: \"*/*\" },\n      body: JSON.stringify({ date: modWeek }),\n    };\n    fetch(\n      \"https://europe-west1-plannerapp-960c1.cloudfunctions.net/app/api/get-all-tasks\",\n      requestOptions\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        setTaskData(data);\n      });\n      \n  }, [weekState, refresh]);\n\n  return (\n    <DataContext.Provider value={{ weekState: weekState, setWeek: setWeek, currWeek: currWeek, currMonth: currMonth, taskData: taskData, setRefresh: setRefresh}}>\n      {props.children}\n    </DataContext.Provider>\n  );\n}\n\nexport default DataProvider;\n"]},"metadata":{},"sourceType":"module"}