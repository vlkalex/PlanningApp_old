{"ast":null,"code":"import moment from 'moment';\nimport { CommTasksDocument, MeetingTasksDocument, WorkTasksDocument } from '../generated/graphql';\nexport function useOnDragEnd({\n  result: {\n    source,\n    destination,\n    draggableId,\n    type\n  },\n  workData,\n  meetingData,\n  commData,\n  currWeek,\n  editMeetingTaskDate,\n  editCommTaskDate,\n  editWorkTaskDate\n}) {\n  var _destination$droppabl;\n\n  if (destination == null) return;\n  const sourceId = +source.droppableId.slice(0, -1);\n  const destinationId = +((_destination$droppabl = destination.droppableId) === null || _destination$droppabl === void 0 ? void 0 : _destination$droppabl.slice(0, -1));\n  if (sourceId === destinationId) return;\n  let meetUpdated = false;\n  let workUpdated = false;\n  let commUpdated = false;\n\n  if (type === 'MEET') {\n    const task = meetingData.meetingTaskMany.items.find(({\n      id\n    }) => id === draggableId);\n    if (task == null) return;\n    editMeetingTaskDate({\n      variables: {\n        id: task.id,\n        userId: task.user.id,\n        index: task.index,\n        date: moment.unix(destinationId).toDate().toISOString()\n      },\n      optimisticResponse: {\n        editTask: { ...task,\n          date: moment.unix(destinationId).toDate().toISOString()\n        }\n      },\n      update: (store, {\n        data\n      }) => {\n        if (meetUpdated) return;\n\n        try {\n          const result = store.readQuery({\n            query: MeetingTasksDocument,\n            variables: {\n              userId: task.user.id,\n              dateFrom: new Date(currWeek[0]).toISOString(),\n              dateTo: new Date(currWeek[6]).toISOString()\n            }\n          });\n          if (result == null) return;\n          store.writeQuery({\n            query: MeetingTasksDocument,\n            variables: {\n              userId: task.user.id,\n              dateFrom: new Date(currWeek[0]).toISOString(),\n              dateTo: new Date(currWeek[6]).toISOString()\n            },\n            data: {\n              items: [data === null || data === void 0 ? void 0 : data.editTask]\n            }\n          });\n          meetUpdated = true;\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    });\n  }\n\n  if (type === 'COMM') {\n    var _commData$communicati;\n\n    const task = commData === null || commData === void 0 ? void 0 : (_commData$communicati = commData.communicationTaskMany) === null || _commData$communicati === void 0 ? void 0 : _commData$communicati.items.find(({\n      id\n    }) => id === draggableId);\n    if (task == null) return;\n    editCommTaskDate({\n      variables: {\n        id: task.id,\n        userId: task.user.id,\n        index: task.index,\n        date: moment.unix(destinationId).toDate().toISOString()\n      },\n      optimisticResponse: {\n        editTask: { ...task,\n          date: moment.unix(destinationId).toDate().toISOString()\n        }\n      },\n      update: (store, {\n        data\n      }) => {\n        if (commUpdated) return;\n        const result = store.readQuery({\n          query: CommTasksDocument,\n          variables: {\n            userId: task.user.id,\n            dateFrom: new Date(currWeek[0]).toISOString(),\n            dateTo: new Date(currWeek[6]).toISOString()\n          }\n        });\n        if (result == null) return;\n        store.writeQuery({\n          query: CommTasksDocument,\n          variables: {\n            userId: task.user.id,\n            dateFrom: new Date(currWeek[0]).toISOString(),\n            dateTo: new Date(currWeek[6]).toISOString()\n          },\n          data: {\n            items: [data === null || data === void 0 ? void 0 : data.editTask]\n          }\n        });\n        commUpdated = true;\n      }\n    });\n  }\n\n  if (type === 'WORK') {\n    var _workData$workTaskMan;\n\n    const task = workData === null || workData === void 0 ? void 0 : (_workData$workTaskMan = workData.workTaskMany) === null || _workData$workTaskMan === void 0 ? void 0 : _workData$workTaskMan.items.find(({\n      id\n    }) => id === draggableId);\n    if (task == null) return;\n    editWorkTaskDate({\n      variables: {\n        id: task.id,\n        userId: task.user.id,\n        index: task.index,\n        date: moment.unix(destinationId).toDate().toISOString()\n      },\n      optimisticResponse: {\n        editTask: { ...task,\n          date: moment.unix(destinationId).toDate().toISOString()\n        }\n      },\n      update: (store, {\n        data\n      }) => {\n        if (workUpdated) return;\n        const result = store.readQuery({\n          query: WorkTasksDocument,\n          variables: {\n            userId: task.user.id,\n            dateFrom: new Date(currWeek[0]).toISOString(),\n            dateTo: new Date(currWeek[6]).toISOString()\n          }\n        });\n        if (result == null) return;\n        store.writeQuery({\n          query: WorkTasksDocument,\n          variables: {\n            userId: task.user.id,\n            dateFrom: new Date(currWeek[0]).toISOString(),\n            dateTo: new Date(currWeek[6]).toISOString()\n          },\n          data: {\n            items: [data === null || data === void 0 ? void 0 : data.editTask]\n          }\n        });\n        workUpdated = true;\n      }\n    });\n  }\n}","map":{"version":3,"sources":["/Users/alexvlk/Documents/Projects/GitHub/ConsultApp/src/functions/onDragEnd.tsx"],"names":["moment","CommTasksDocument","MeetingTasksDocument","WorkTasksDocument","useOnDragEnd","result","source","destination","draggableId","type","workData","meetingData","commData","currWeek","editMeetingTaskDate","editCommTaskDate","editWorkTaskDate","sourceId","droppableId","slice","destinationId","meetUpdated","workUpdated","commUpdated","task","meetingTaskMany","items","find","id","variables","userId","user","index","date","unix","toDate","toISOString","optimisticResponse","editTask","update","store","data","readQuery","query","dateFrom","Date","dateTo","writeQuery","e","console","error","communicationTaskMany","workTaskMany"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport { DropResult } from 'react-beautiful-dnd';\nimport {\n  CommTasksDocument,\n  CommTasksQuery,\n  EditCommTaskDateMutationFn,\n  EditMeetingTaskDateMutationFn,\n  EditWorkTaskDateMutationFn,\n  MeetingTasksDocument,\n  MeetingTasksQuery,\n  WorkTasksDocument,\n  WorkTasksQuery\n} from '../generated/graphql';\n\ninterface InputProps {\n  result: DropResult;\n  workData: WorkTasksQuery;\n  meetingData: MeetingTasksQuery;\n  commData: CommTasksQuery;\n  currWeek: number[];\n  editMeetingTaskDate: EditMeetingTaskDateMutationFn;\n  editCommTaskDate: EditCommTaskDateMutationFn;\n  editWorkTaskDate: EditWorkTaskDateMutationFn;\n}\n\nexport function useOnDragEnd({\n  result: { source, destination, draggableId, type },\n  workData,\n  meetingData,\n  commData,\n  currWeek,\n  editMeetingTaskDate,\n  editCommTaskDate,\n  editWorkTaskDate\n}: InputProps) {\n  if (destination == null) return;\n\n  const sourceId = +source.droppableId.slice(0, -1);\n  const destinationId = +destination.droppableId?.slice(0, -1);\n\n  if (sourceId === destinationId) return;\n\n  let meetUpdated = false;\n  let workUpdated = false;\n  let commUpdated = false;\n\n  if (type === 'MEET') {\n    const task = meetingData.meetingTaskMany.items.find(\n      ({ id }) => id === draggableId\n    );\n\n    if (task == null) return;\n\n    editMeetingTaskDate({\n      variables: {\n        id: task.id,\n        userId: task.user.id,\n        index: task.index,\n        date: moment.unix(destinationId).toDate().toISOString()\n      },\n      optimisticResponse: {\n        editTask: {\n          ...task,\n          date: moment.unix(destinationId).toDate().toISOString()\n        }\n      },\n      update: (store, { data }) => {\n        if (meetUpdated) return;\n        try {\n          const result = store.readQuery<MeetingTasksQuery>({\n            query: MeetingTasksDocument,\n            variables: {\n              userId: task.user.id,\n              dateFrom: new Date(currWeek[0]).toISOString(),\n              dateTo: new Date(currWeek[6]).toISOString()\n            }\n          });\n\n          if (result == null) return;\n\n          store.writeQuery({\n            query: MeetingTasksDocument,\n            variables: {\n              userId: task.user.id,\n              dateFrom: new Date(currWeek[0]).toISOString(),\n              dateTo: new Date(currWeek[6]).toISOString()\n            },\n            data: {\n              items: [data?.editTask]\n            }\n          });\n\n          meetUpdated = true;\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    });\n  }\n\n  if (type === 'COMM') {\n    const task = commData?.communicationTaskMany?.items.find(\n      ({ id }) => id === draggableId\n    );\n    if (task == null) return;\n\n    editCommTaskDate({\n      variables: {\n        id: task.id,\n        userId: task.user.id,\n        index: task.index,\n        date: moment.unix(destinationId).toDate().toISOString()\n      },\n      optimisticResponse: {\n        editTask: {\n          ...task,\n          date: moment.unix(destinationId).toDate().toISOString()\n        }\n      },\n      update: (store, { data }) => {\n        if (commUpdated) return;\n        const result = store.readQuery<CommTasksQuery>({\n          query: CommTasksDocument,\n          variables: {\n            userId: task.user.id,\n            dateFrom: new Date(currWeek[0]).toISOString(),\n            dateTo: new Date(currWeek[6]).toISOString()\n          }\n        });\n\n        if (result == null) return;\n\n        store.writeQuery({\n          query: CommTasksDocument,\n          variables: {\n            userId: task.user.id,\n            dateFrom: new Date(currWeek[0]).toISOString(),\n            dateTo: new Date(currWeek[6]).toISOString()\n          },\n          data: {\n            items: [data?.editTask]\n          }\n        });\n\n        commUpdated = true;\n      }\n    });\n  }\n\n  if (type === 'WORK') {\n    const task = workData?.workTaskMany?.items.find(\n      ({ id }) => id === draggableId\n    );\n\n    if (task == null) return;\n\n    editWorkTaskDate({\n      variables: {\n        id: task.id,\n        userId: task.user.id,\n        index: task.index,\n        date: moment.unix(destinationId).toDate().toISOString()\n      },\n      optimisticResponse: {\n        editTask: {\n          ...task,\n          date: moment.unix(destinationId).toDate().toISOString()\n        }\n      },\n      update: (store, { data }) => {\n        if (workUpdated) return;\n        const result = store.readQuery<WorkTasksQuery>({\n          query: WorkTasksDocument,\n          variables: {\n            userId: task.user.id,\n            dateFrom: new Date(currWeek[0]).toISOString(),\n            dateTo: new Date(currWeek[6]).toISOString()\n          }\n        });\n\n        if (result == null) return;\n\n        store.writeQuery({\n          query: WorkTasksDocument,\n          variables: {\n            userId: task.user.id,\n            dateFrom: new Date(currWeek[0]).toISOString(),\n            dateTo: new Date(currWeek[6]).toISOString()\n          },\n          data: {\n            items: [data?.editTask]\n          }\n        });\n\n        workUpdated = true;\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}